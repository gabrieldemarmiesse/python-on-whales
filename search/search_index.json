{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A Docker client for Python, designed to be fun and intuitive!</p> <p>Works on Linux, macOS and Windows, for Python 3.8 and above. </p> <ul> <li>Documentation</li> <li>Github repository</li> </ul>"},{"location":"#how-to-install","title":"How to install?","text":"<pre><code>pip install python-on-whales\n</code></pre> <p>See https://gabrieldemarmiesse.github.io/python-on-whales/docker_client/#the-dockerpodman-cli for instructions on installing Docker/Podman.</p>"},{"location":"#some-cool-examples","title":"Some cool examples","text":"<p>Start by doing <pre><code>from python_on_whales import docker\n</code></pre> and then:</p> <ul> <li><code>docker run hello-world</code> -&gt; <code>docker.run(\"hello-world\")</code></li> <li><code>docker pull ubuntu</code> -&gt; <code>docker.pull(\"ubuntu\")</code></li> <li><code>docker build ./</code> -&gt; <code>docker.build(\"./\")</code></li> <li><code>docker compose up my_service</code> -&gt; <code>docker.compose.up([\"my_service\"])</code></li> <li><code>docker image ls</code> -&gt; <code>docker.image.list()</code></li> <li><code>docker ps</code> -&gt; <code>docker.ps()</code></li> <li><code>docker cp</code> -&gt; <code>docker.copy()</code></li> </ul> <p>You get the idea \ud83d\ude42 it's the same as the CLI we all know and love.</p> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n\n&gt;&gt;&gt; output = docker.run(\"hello-world\")\n&gt;&gt;&gt; print(output)\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\n...\n</code></pre> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n&gt;&gt;&gt; print(docker.run(\"nvidia/cuda:11.0-base\", [\"nvidia-smi\"], gpus=\"all\"))\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 450.51.06    Driver Version: 450.51.06    CUDA Version: 11.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |\n| N/A   34C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n</code></pre> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n&gt;&gt;&gt; my_docker_image = docker.pull(\"ubuntu:20.04\")\n20.04: Pulling from library/ubuntu\ne6ca3592b144: Downloading [=============&gt;                                     ]  7.965MB/28.56MB\n534a5505201d: Download complete\n990916bd23bb: Download complete\n\n&gt;&gt;&gt; print(my_docker_image.repo_tags)\n['ubuntu:20.04']\n\n&gt;&gt;&gt; docker.image.list()\n[python_on_whales.Image(id='sha256:1a437e363abfa', tags=['ubuntu:20.04'])]\n\n&gt;&gt;&gt; my_docker_image.remove()\n</code></pre> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n&gt;&gt;&gt; my_image = docker.build(\".\", tags=\"some_name\")  # uses Buildx/buildkit by default\n[+] Building 1.6s (17/17) FINISHED\n =&gt; [internal] load build definition from Dockerfile                                                            0.0s\n =&gt; =&gt; transferring dockerfile: 32B                                                                             0.0s\n =&gt; [internal] load .dockerignore                                                                               0.0s\n =&gt; =&gt; transferring context: 2B                                                                                 0.0s\n =&gt; [internal] load metadata for docker.io/library/python:3.6                                                   1.4s\n =&gt; [python_dependencies 1/5] FROM docker.io/library/python:3.6@sha256:29328c59adb9ee6acc7bea8eb86d0cb14033c85  0.0s\n =&gt; [internal] load build context                                                                               0.1s\n =&gt; =&gt; transferring context: 72.86kB                                                                            0.0s\n =&gt; CACHED [python_dependencies 2/5] RUN pip install typeguard pydantic requests tqdm                           0.0s\n =&gt; CACHED [python_dependencies 3/5] COPY tests/test-requirements.txt /tmp/                                     0.0s\n =&gt; CACHED [python_dependencies 4/5] COPY requirements.txt /tmp/                                                0.0s\n =&gt; CACHED [python_dependencies 5/5] RUN pip install -r /tmp/test-requirements.txt -r /tmp/requirements.txt     0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 1/7] RUN apt-get update &amp;&amp;     apt-get install -y       apt-tr  0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 2/7] RUN curl -fsSL https://download.docker.com/linux/ubuntu/g  0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 3/7] RUN add-apt-repository    \"deb [arch=amd64] https://downl  0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 4/7] RUN  apt-get update &amp;&amp;      apt-get install -y docker-ce-  0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 5/7] WORKDIR /python-on-whales                                  0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 6/7] COPY . .                                                   0.0s\n =&gt; CACHED [tests_ubuntu_install_without_buildx 7/7] RUN pip install -e .                                       0.0s\n =&gt; exporting to image                                                                                          0.1s\n =&gt; =&gt; exporting layers                                                                                         0.0s\n =&gt; =&gt; writing image sha256:e1c2382d515b097ebdac4ed189012ca3b34ab6be65ba0c650421ebcac8b70a4d                    0.0s\n =&gt; =&gt; naming to docker.io/library/some_image_name\n</code></pre>"},{"location":"#some-more-dockerrun-advanced-examples-with-postgres","title":"Some more <code>docker.run()</code> advanced examples with postgres","text":"<p><pre><code>docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n</code></pre> becomes <pre><code>from python_on_whales import docker\n\ndocker.run(\n    \"postgres:9.6\",\n    name=\"some-postgres\",\n    envs={\"POSTGRES_PASSWORD\": \"mysecretpassword\"},\n    detach=True,\n)\nprint(docker.ps())\n# [python_on_whales.Container(id='f5fb939c409d', name='some-postgres')]\n</code></pre></p> <p><pre><code>docker run -it --rm --network some-network postgres psql -h some-postgres -U postgres\n</code></pre> becomes <pre><code>from python_on_whales import docker\n\n# since it's interactive, you'll be dropped into the psql shell. The python code\n# will continue only after you exit the shell.\ndocker.run(\n    \"postgres:9.6\",\n    [\"psql\", \"-h\", \"some-postgres\", \"-U\", \"postgres\"],\n    networks=[\"some-network\"],\n    interactive=True,\n    tty=True,\n    remove=True,\n)\n</code></pre></p> <p><pre><code>docker run -d --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -e PGDATA=/var/lib/postgresql/data/pgdata -v /custom/mount:/var/lib/postgresql/data -v myvolume:/tmp/myvolume postgres -c shared_buffers=256MB -c max_connections=200\n</code></pre> becomes <pre><code>from python_on_whales import docker\n\ndocker.run(\n    \"postgres:9.6\",\n    [\"-c\", \"shared_buffers=256MB\", \"-c\", \"max_connections=200\"],\n    name=\"some-postgres\",\n    envs={\"POSTGRES_PASSWORD\": \"mysecretpassword\", \"PGDATA\": \"/var/lib/postgresql/data/pgdata\"},\n    volumes=[(\"/custom/mount\", \"/var/lib/postgresql/data\"), (\"myvolume\", \"/tmp/myvolume\")],\n    detach=True,\n)\n</code></pre></p> <p>Any Docker object can be used as a context manager to ensure it's removed even if an exception occurs:</p> <pre><code>from python_on_whales import docker\n\nwith docker.volume.create(\"random_name\") as some_volume:\n    docker.run(\n        \"postgres:9.6\",\n        [\"-c\", \"shared_buffers=256MB\", \"-c\", \"max_connections=200\"],\n        name=\"some-postgres\",\n        envs={\"POSTGRES_PASSWORD\": \"mysecretpassword\", \"PGDATA\": \"/var/lib/postgresql/data/pgdata\"},\n        volumes=[(some_volume, \"/var/lib/postgresql/data\"), (\"myvolume\", \"/tmp/myvolume\")],\n        detach=True,\n    )\n    # so some stuff here\n\n# here we are out of the context manager, so the volume has been removed, even if there was an exception.\n</code></pre>"},{"location":"#main-features","title":"Main features","text":"<ul> <li>1 to 1 mapping between the CLI interface and the Python API. No need to look in the docs what is the name of the function/argument you need.</li> <li>Support for the latest Docker features:  Docker buildx/buildkit,  <code>docker run --gpu=all ...</code></li> <li>Support for Docker stack, services and Swarm (same API as the command line).</li> <li>Progress bars and progressive outputs when pulling, pushing, loading, building...</li> <li>Support for some other CLI commands that are not in Docker-py:  <code>docker cp</code>, <code>docker run --cpus ...</code> and more.</li> <li>Nice SSH support for remote daemons.</li> <li>Docker object as Python objects: Container, Images, Volumes, Services... and their attributes are updated in real-time!</li> <li>Each Docker object can be used as a context manager. When getting out of the  context, the Docker object is removed automatically, even if an exception occurs.</li> <li>A fully typed API (Mypy and IDE-friendly) compatible with <code>pathlib</code> and <code>os.path</code></li> <li>All Docker objects and the Docker client are safe to use with multithreading and multiprocessing.</li> <li>Display the commands called and the environment variables used by setting the environment variable <code>PYTHON_ON_WHALES_DEBUG=1</code>.</li> </ul>"},{"location":"#why-another-project-why-not-build-on-docker-py","title":"Why another project? Why not build on Docker-py?","text":"<p>In a sense this project is built on top of Docker-py  because the implementation, the organisation and the API is inspired from the project, but the codebases  could not be the same.</p> <p>Two major differences do not permit that:</p> <p>1) The API is quite different. The aim of Python on Whales is to provide a 1-to-1  mapping between the Docker command line and Python, so that users don't even have  to open the docs to do write code.</p> <p>2) While Docker-py is a complete re-implementation of the Docker client binary  (written in Go), Python on whales sits on top of the Docker client binary, which makes  implementing new features much easier and safer. For example, it's  unlikely that docker-py supports Buildx/buildkit anytime soon because rewriting a large Go codebase in Python is hard work.</p> <p></p>"},{"location":"#should-i-use-docker-py-or-python-on-whales","title":"Should I use Docker-py or Python on Whales?","text":"<p>Well, it's written in each project's description!</p> <ul> <li>Docker-py: A Python library for the Docker Engine API</li> <li>Python on whales: An awesome Python wrapper for an awesome Docker CLI</li> </ul> <p>If you need to talk to the Docker engine directly, you need to do low level operations, use docker-py. Some good example would be writing the code to control docker from an IDE,  or if the speed of Docker calls is very important.  If you don't want to depend on the Docker CLI binary (~50MB), use docker-py.</p> <p>If you wanted to call the docker command line from Python,  do high level operations, use Python on Whales. For example if you want to write your CI logic in Python rather than in bash (a very good choice \ud83d\ude09). Some commands are only available in Python on whales  too: <code>docker.buildx.build(...)</code>, <code>docker.stack.deploy(...)</code>...</p> <p>Use the right tool for the right job \ud83d\ude42</p>"},{"location":"#alternatives-to-docker-podman-nerdctl","title":"Alternatives to Docker: Podman, nerdctl...","text":"<p>Support for Docker-compatible clients like Podman and Nerdctl was introduced in Python-on-whales version 0.44.0.</p> <p>You can use an arbitrary binary to execute Docker commands by using the argument <code>client_call</code> of <code>python_on_whales.DockerCLient</code>. Here is an example: <pre><code>&gt;&gt;&gt; from python_on_whales import DockerClient\n\n&gt;&gt;&gt; nerdctl = DockerClient(client_call=[\"nerdctl\"])\n\n&gt;&gt;&gt; nerdctl.pull(\"python:3.9\")\ndocker.io/library/python:3.9:                                                     resolved       |++++++++++++++++++++++++++++++++++++++|\nindex-sha256:a83c0aa6471527636d7331c30704d0f88e0ab3331bbc460d4ae2e53bbae64dca:    done           |++++++++++++++++++++++++++++++++++++++|\nmanifest-sha256:8ccef93ff3c9e1bb9562d394526cdc6834033a0498073d41baa8b309f4fac20e: done           |++++++++++++++++++++++++++++++++++++++|\nconfig-sha256:f033692e2c5abe1e0ee34bcca759a3e4432b10b0031174b08d48bcc90d14d68b:   done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:9952b1051adaff513c99f86765361450af108b12b0073d0ba40255c4e419b481:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:c766e27afb21eddf9ab3e4349700ebe697c32a4c6ada6af4f08282277a291a28:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:1535e3c1181a81ea66d5bacb16564e4da2ba96304506598be39afe9c82b21c5c:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:6de7cb7bdc8f9b4c4d6539233fe87304aa1a6427c3238183265c9f02d831eddb:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:967757d5652770cfa81b6cc7577d65e06d336173da116d1fb5b2d349d5d44127:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:c357e2c68cb3bf1e98dcb3eb6ceb16837253db71535921d6993c594588bffe04:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:26787c68cf0c92a778db814d327e283fe1da4434a7fea1f0232dae8002e38f33:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:6aefca2dc61dcbcd268b8a9861e552f9cdb69e57242faec64ac120d2355a9c1a:    done           |++++++++++++++++++++++++++++++++++++++|\nlayer-sha256:32a180f5cf85702e7680719c40c39c07972b1176355df5a621de9eb87ad07ce2:    done           |++++++++++++++++++++++++++++++++++++++|\nelapsed: 35.9s                                                                    total:  333.5  (9.3 MiB/s)\n\npython_on_whales.Image(id='sha256:f033692e2c5ab', tags=['python:3.9'])\n</code></pre></p> <p>You can do something similar with podman:</p> <pre><code>from python_on_whales import DockerClient\n\npodman = DockerClient(client_call=[\"podman\"])\n\npodman.pull(\"hello-world\")\npodman.run(\"hello-world\")\nprint(podman.ps())\n...\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Any and all PRs are welcome. Please see this documentation.</p>"},{"location":"#what-about-the-license","title":"What about the license?","text":"<p>It's a MIT license, so quite permissive.</p> <p>The license can be found in the git repository.</p>"},{"location":"docker_client/","title":"The Docker client object","text":""},{"location":"docker_client/#python_on_whales.docker_client.DockerClient","title":"DockerClient","text":"<p>Creates a Docker client</p> <p>Note that <pre><code>from python_on_whales import docker\nprint(docker.run(\"hello-world\"))\n</code></pre> is equivalent to <pre><code>from python_on_whales import DockerClient\ndocker = DockerClient()\nprint(docker.run(\"hello-world\")\n</code></pre></p> PARAMETER DESCRIPTION <code>config</code> <p>Location of client config files (default \"~/.docker\")</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>context</code> <p>Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>debug</code> <p>Enable debug mode</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>host</code> <p>Daemon socket(s) to connect to</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>log_level</code> <p>Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>tls</code> <p>Use TLS; implied by <code>tlsverify</code></p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>tlscacert</code> <p>Trust certs signed only by this CA (default \"~/.docker/ca.pem\")</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>compose_files</code> <p>Docker compose yaml file</p> <p> TYPE: <code>List[ValidPath]</code> DEFAULT: <code>[]</code> </p> <code>compose_profiles</code> <p>List of compose profiles to use. Take a look at the documentation for profiles.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>compose_env_file</code> <p>.env file containing the environments variables to inject into the compose project. By default, it uses <code>./.env</code>.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>compose_project_name</code> <p>The name of the compose project. It will be prefixed to networks, volumes and containers created by compose.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>compose_project_directory</code> <p>Use an alternate working directory. By default, it uses the path of the compose file.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>compose_compatibility</code> <p>Use docker compose in compatibility mode.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>client_call</code> <p>Client binary to use and how to call it. Default is <code>[\"docker\"]</code>. You can try with for example <code>[\"podman\"]</code> or <code>[\"nerdctl\"]</code>. The client must have the same commands and outputs as Docker to work. Some best effort support is done in case of divergences, meaning you can report issues occuring on some other binary than Docker, but we don't guarantee that it will be fixed. This option is a list because you can provide a list of command line arguments to be placed after <code>\"docker\"</code>. For exemple <code>host=\"ssh://my_user@host.com\"</code> is equivalent to <code>client_call=[\"docker\", \"--host=ssh://my_user@host.com\"]</code>. This will allow you to use some exotic options that are not explicitly supported by Python-on-whales. Let's say you want to use estargz to run a container immediately, without waiting for the \"pull\" to finish (yes it's possible!), you can do <code>nerdctl = DockerClient(client_call=[\"nerdctl\", \"--snapshotter=stargz\"])</code> and then <code>nerdctl.run(\"ghcr.io/stargz-containers/python:3.7-org\", [\"-c\", \"print('hi')\"])</code>. You can also use this system to call Docker with sudo with <code>client_call=[\"sudo\", \"docker\"]</code> (note that it won't ask for your password, so sudo should be passwordless during the python program execution).</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>['docker']</code> </p> <code>client_binary</code> <p>Deprecated, use <code>client_call</code>. If you used before <code>client_binary=\"podman\"</code>, now use <code>client_call=[\"podman\"]</code>.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'docker'</code> </p> <code>client_type</code> <p>The kind of client that is called by the Python process. It allows Python-on-whales to adapt to the client's behavior if two client have a different behavior. The <code>client_call</code> is not enough for Python-on-whales to know what kind of client you're using. For example, if you use a symlink to call Docker, Python-on-whales will not know that you're using Docker. Default is \"unknown\". If at some point, Python-on-whales has to choose a behavior and <code>client_type</code> is <code>\"unknown\"</code>, it will raise an exception and ask you to specify what kind of client you're working with. Valid values are <code>\"docker\"</code>, <code>\"podman\"</code>, \"<code>nerdctl\"</code> and <code>\"unknown\"</code>.</p> <p> TYPE: <code>Literal['docker', 'podman', 'nerdctl', 'unknown']</code> DEFAULT: <code>'unknown'</code> </p>"},{"location":"docker_client/#python_on_whales.docker_client.DockerClient.login","title":"login","text":"<pre><code>login(server=None, username=None, password=None)\n</code></pre> <p>Log in to a Docker registry.</p> <p>If no server is specified, the default is defined by the daemon.</p> PARAMETER DESCRIPTION <code>server</code> <p>The server to log into. For example, with a self-hosted registry it might be something like <code>server=\"192.168.0.10:5000\"</code></p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>username</code> <p>The username</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>password</code> <p>The password</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"docker_client/#python_on_whales.docker_client.DockerClient.login_ecr","title":"login_ecr","text":"<pre><code>login_ecr(aws_access_key_id=None, aws_secret_access_key=None, region_name=None, registry=None)\n</code></pre> <p>Login to the aws ECR registry. Credentials are taken from the environment variables as defined in the aws docs.</p> <p>If you don't have a profile or your environment variables configured, you can also use the function arguments <code>aws_access_key_id</code>, <code>aws_secret_access_key</code>, <code>region_name</code>.</p> <p>Behind the scenes, those arguments are passed directly to <pre><code>botocore.session.get_session().create_client(...)\n</code></pre></p> <p>You need botocore to run this function. Use <code>pip install botocore</code> to install it.</p> <p>The <code>registry</code> parameter can be used to override the registry that is guessed from the authorization token request's response. In other words: If the registry is <code>None</code> (the default) then it will be assumed that it's the ECR registry linked to the credentials provided. It is especially useful if the aws account you use can access several repositories and you need to explicitly define the one you want to use</p>"},{"location":"docker_client/#python_on_whales.docker_client.DockerClient.logout","title":"logout","text":"<pre><code>logout(server=None)\n</code></pre> <p>Logout from a Docker registry</p> PARAMETER DESCRIPTION <code>server</code> <p>The server to logout from. For example, with a self-hosted registry it might be something like <code>server=\"192.168.0.10:5000\"</code></p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"docker_client/#python_on_whales.docker_client.DockerClient.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Get version information about the container client and server.</p>"},{"location":"docker_client/#python_on_whales.docker_client.DockerClient.version--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Version` object\n</code></pre> <p>As an example:</p> <pre><code>from python_on_whales import docker\n\nversion_info = docker.version()\nprint(version_info.client.version)\n# 3.4.2\nprint(version_info.server.kernel_version)\n# 5.15.133.1-microsoft-standard-WSL2\n...\n</code></pre>"},{"location":"docker_client/#sub-commands","title":"Sub-commands","text":"<ul> <li><code>docker.buildx</code></li> <li><code>docker.compose</code></li> <li><code>docker.config</code></li> <li><code>docker.container</code></li> <li><code>docker.context</code></li> <li><code>docker.image</code></li> <li><code>docker.manifest</code></li> <li><code>docker.network</code></li> <li><code>docker.node</code></li> <li><code>docker.secret</code></li> <li><code>docker.service</code></li> <li><code>docker.stack</code></li> <li><code>docker.swarm</code></li> <li><code>docker.system</code></li> <li><code>docker.trust</code></li> <li><code>docker.volume</code></li> <li><code>podman.pod</code></li> </ul>"},{"location":"docker_client/#other-commands","title":"Other commands","text":"<p>They're actually aliases</p> <ul> <li><code>docker.attach</code></li> <li><code>docker.build</code></li> <li><code>docker.commit</code></li> <li><code>docker.copy</code></li> <li><code>docker.create</code></li> <li><code>docker.diff</code></li> <li><code>docker.execute</code></li> <li><code>docker.export</code></li> <li><code>docker.images</code></li> <li><code>docker.import_</code></li> <li><code>docker.info</code></li> <li><code>docker.kill</code></li> <li><code>docker.load</code></li> <li><code>docker.logs</code></li> <li><code>docker.pause</code></li> <li><code>docker.ps</code></li> <li><code>docker.pull</code></li> <li><code>docker.push</code></li> <li><code>docker.rename</code></li> <li><code>docker.restart</code></li> <li><code>docker.remove</code></li> <li><code>docker.run</code></li> <li><code>docker.save</code></li> <li><code>docker.start</code></li> <li><code>docker.stats</code></li> <li><code>docker.stop</code></li> <li><code>docker.tag</code></li> <li><code>docker.top</code></li> <li><code>docker.unpause</code></li> <li><code>docker.update</code></li> <li><code>docker.wait</code></li> </ul>"},{"location":"docker_client/#about-multithreading-and-multiprocessing","title":"About multithreading and multiprocessing","text":"<p>Behind the scenes, Python on whales calls the Docker command line interface with subprocess. The Python on whales client does not store any intermediate state so it's safe  to use with multithreading. </p> <p>The Docker objects store some intermediate states (the attributes  that you would normally get with <code>docker ... inspect</code>but no logic in  the codebase depends on those attributes. They're just here so that users can look at them.  So you can share them between process/threads and pickle containers, images, networks...</p> <p>The Docker daemon works with its own objects internally and handles concurrent and conflicting requests.  For example, if you create two containers with the same name from different threads, only one will  succeed. If you pull the same docker image from multiple processes/threads, the Docker daemon will  only pull the image and layers once.</p> <p>Just be careful with some scenario similar to this one</p> <pre><code>Thread 1: my_container = docker.run(..., detach=True)\n...\n# my_container finishes\n...\nThread 2: docker.container.prune()\n...\nThread 1: docker.logs(my_container)  # will fail because the container was removed by thread 2\n</code></pre> <p>In the end, unless you use this type of logic in your code,  Python-on-whales is safe to use with multithreading and multiprocessing.</p>"},{"location":"docker_client/#the-dockerpodman-cli","title":"The Docker/Podman CLI","text":"<p>Python-on-whales needs the Docker or Podman CLI to work (unlike docker-py). Most of the time, users already have the CLI installed on their machines. It's possible to  verify that the CLI is there by doing <code>docker --help</code> (or <code>podman --help</code>) in the command line.</p> <p>Sometimes, the CLI might not be available on the system, it can happen if you want to control Docker from within a container with <code>-v /var/run/docker.sock:/var/run/docker.sock</code>, or if you want to connect to a remote daemon with the <code>host</code> argument.</p> <p>Instructions for installing Docker can be found at https://docs.docker.com/engine/install/, and Podman at https://podman.io/docs/installation/. Note that if connecting to Docker/Podman remotely then the Docker daemon (<code>dockerd</code>) is not needed, and similarly for Podman it is possible to use <code>podman-remote</code> (available as a static binary from https://github.com/containers/podman/releases/latest).</p> <p>Previously, when using python-on-whales, the Docker CLI was downloaded automatically, but this functionality was removed under https://github.com/gabrieldemarmiesse/python-on-whales/pull/633.</p>"},{"location":"docker_client/#handling-an-unavailable-client","title":"Handling an unavailable client","text":"<p>Trying to use Python-on-whales when it cannot find or download a Docker client binary will trigger a <code>python_on_whales.ClientNotFoundError</code>. You can use a try-except around  a first <code>docker.ps()</code> call to handle the case when Python-on-whales won't work.</p>"},{"location":"objects/builders/","title":"Docker builders","text":"<p>The Buildx builders objects.</p> <p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_builder = docker.buildx.inspect(\"my-builder\")\n\n# or\n\nmy_builder = docker.buildx.create()\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Builder\n</code></pre>"},{"location":"objects/builders/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker buildx inspect ...</code></p> <p>Only a few are available at the moment <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: my_builder = docker.buildx.create()\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [4]: super_print(builder.name)\ntype = &lt;class 'str'&gt;, value = friendly_taussig\n\nIn [5]: super_print(builder.driver)\ntype = &lt;class 'str'&gt;, value = docker-container\n\nIn [6]: super_print(builder.last_activity)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:40+00:00\n\nIn [7]: super_print(builder.dynamic)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [8]: super_print(builder.nodes[0].name)\ntype = &lt;class 'str'&gt;, value = friendly_taussig0\n\nIn [9]: super_print(builder.nodes[0].endpoint)\ntype = &lt;class 'str'&gt;, value = unix:///var/run/docker.sock\n\nIn [10]: super_print(builder.nodes[0].flags)\ntype = &lt;class 'list'&gt;, value = ['--allow-insecure-entitlement=network.host']\n\nIn [11]: super_print(builder.nodes[0].status)\ntype = &lt;class 'str'&gt;, value = inactive\n\nIn [12]: super_print(builder.nodes[0].version)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [13]: super_print(builder.nodes[0].ids)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [14]: super_print(builder.nodes[0].platforms)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [15]: super_print(builder.nodes[0].labels)\ntype = &lt;class 'NoneType'&gt;, value = None\n</code></pre></p>"},{"location":"objects/builders/#methods","title":"Methods","text":""},{"location":"objects/builders/#python_on_whales.Builder","title":"Builder","text":""},{"location":"objects/builders/#python_on_whales.Builder.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Removes this builder. After this operation the builder cannot be used anymore.</p> <p>If you use the builder as a context manager, it will call this function when you exit the context manager.</p> <pre><code>from python_on_whales import docker\n\nbuildx_builder = docker.buildx.create(use=True)\nwith buildx_builder:\n    docker.build(\".\")\n\n# now the variable buildx_builder is not usable since we're out of the context manager.\n# the .remove() method was called behind the scenes\n# since it was the current builder, 'default' is now the current builder.\n</code></pre>"},{"location":"objects/configs/","title":"Docker configs","text":"<p>Configs objects present in Swarm mode</p> <p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_config = docker.config.inspect(\"my-config-name\")\n\n# or\n\nmy_config = docker.config.create(\"my_config_name\", \"my_config_file\")\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Config\n\ndef print_config_labels(config: Config):\n    print(config.spec.labels)\n</code></pre>"},{"location":"objects/configs/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker config inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: config = docker.config.create(\"my_config\", \"./config_file.cfg\", labels=dict(hello=\"world\"))\n\nIn [3]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [4]: super_print(config.id)\ntype = &lt;class 'str'&gt;, value = hm8wk41hp79f41cmcpzpbuuoe\n\nIn [5]: super_print(config.version.index)\ntype = &lt;class 'int'&gt;, value = 11\n\nIn [6]: super_print(config.created_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:17.718813+00:00\n\nIn [7]: super_print(config.updated_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:17.718813+00:00\n\nIn [8]: super_print(config.spec.name)\ntype = &lt;class 'str'&gt;, value = my_config\n\nIn [9]: super_print(config.spec.labels)\ntype = &lt;class 'dict'&gt;, value = {'hello': 'world'}\n\nIn [10]: super_print(config.spec.data)\ntype = &lt;class 'str'&gt;, value = SGVsbG8gd29ybGQh\n\nIn [11]: super_print(config.spec.templating)\ntype = &lt;class 'NoneType'&gt;, value = None\n</code></pre>"},{"location":"objects/configs/#methods","title":"Methods","text":""},{"location":"objects/configs/#python_on_whales.Config","title":"Config","text":""},{"location":"objects/configs/#python_on_whales.Config.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Remove this config.</p> <p>Note that you can also use a <code>python_on_whales.Config</code> as a context manager to ensure it's removed even if an exception occurs.</p>"},{"location":"objects/containers/","title":"Docker containers","text":"<p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_container = docker.container.inspect(\"my-container-name\")\n\n# for example:\nif my_container.state.running:\n    my_container.kill()\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Container\n\ndef print_dodo(container: Container):\n    print(container.execute([\"echo\", \"dodo\"]))\n</code></pre>"},{"location":"objects/containers/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker container inspect ...</code></p> <p>If you want to know the exact structure, you can go to the  <code>docker container inspect</code> reference page and click on \"200 no error\". An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: container = docker.run(\"ubuntu\", [\"sleep\", \"infinity\"], detach=True)\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [4]: super_print(container.id)\ntype = &lt;class 'str'&gt;, value = 8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9\n\nIn [5]: super_print(container.created)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:30.635402+00:00\n\nIn [6]: super_print(container.path)\ntype = &lt;class 'str'&gt;, value = sleep\n\nIn [7]: super_print(container.args)\ntype = &lt;class 'list'&gt;, value = ['infinity']\n\nIn [8]: super_print(container.state.status)\ntype = &lt;class 'str'&gt;, value = running\n\nIn [9]: super_print(container.state.running)\ntype = &lt;class 'bool'&gt;, value = True\n\nIn [10]: super_print(container.state.paused)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [11]: super_print(container.state.restarting)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [12]: super_print(container.state.oom_killed)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [13]: super_print(container.state.dead)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [14]: super_print(container.state.pid)\ntype = &lt;class 'int'&gt;, value = 2993\n\nIn [15]: super_print(container.state.exit_code)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [16]: super_print(container.state.error)\ntype = &lt;class 'str'&gt;, value = \n\nIn [17]: super_print(container.state.started_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:30.656720+00:00\n\nIn [18]: super_print(container.state.finished_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 0001-01-01 00:00:00+00:00\n\nIn [19]: super_print(container.state.health)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [20]: super_print(container.image)\ntype = &lt;class 'str'&gt;, value = sha256:97bed23a34971024aa8d254abbe67b7168772340d1f494034773bc464e8dd5b6\n\nIn [21]: super_print(container.resolv_conf_path)\ntype = &lt;class 'str'&gt;, value = /var/lib/docker/containers/8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9/resolv.conf\n\nIn [22]: super_print(container.hostname_path)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = /var/lib/docker/containers/8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9/hostname\n\nIn [23]: super_print(container.hosts_path)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = /var/lib/docker/containers/8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9/hosts\n\nIn [24]: super_print(container.log_path)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = /var/lib/docker/containers/8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9/8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9-json.log\n\nIn [25]: super_print(container.node)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [26]: super_print(container.name)\ntype = &lt;class 'str'&gt;, value = charming_albattani\n\nIn [27]: super_print(container.restart_count)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [28]: super_print(container.driver)\ntype = &lt;class 'str'&gt;, value = overlay2\n\nIn [29]: super_print(container.platform)\ntype = &lt;class 'str'&gt;, value = linux\n\nIn [30]: super_print(container.mount_label)\ntype = &lt;class 'str'&gt;, value = \n\nIn [31]: super_print(container.process_label)\ntype = &lt;class 'str'&gt;, value = \n\nIn [32]: super_print(container.app_armor_profile)\ntype = &lt;class 'str'&gt;, value = docker-default\n\nIn [33]: super_print(container.exec_ids)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [34]: super_print(container.host_config.cpu_shares)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [35]: super_print(container.host_config.memory)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [36]: super_print(container.host_config.cgroup_parent)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = .\n\nIn [37]: super_print(container.host_config.blkio_weight)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [38]: super_print(container.host_config.blkio_weight_device)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [39]: super_print(container.host_config.blkio_device_read_bps)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [40]: super_print(container.host_config.blkio_device_write_bps)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [41]: super_print(container.host_config.blkio_device_read_iops)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [42]: super_print(container.host_config.blkio_device_write_iops)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [43]: super_print(container.host_config.cpu_period)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [44]: super_print(container.host_config.cpu_quota)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [45]: super_print(container.host_config.cpu_realtime_period)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [46]: super_print(container.host_config.cpu_realtime_runtime)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [47]: super_print(container.host_config.cpuset_cpus)\ntype = &lt;class 'str'&gt;, value = \n\nIn [48]: super_print(container.host_config.cpuset_mems)\ntype = &lt;class 'str'&gt;, value = \n\nIn [49]: super_print(container.host_config.devices)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [50]: super_print(container.host_config.device_cgroup_rules)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [51]: super_print(container.host_config.device_requests)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [52]: super_print(container.host_config.kernel_memory)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [53]: super_print(container.host_config.kernel_memory_tcp)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [54]: super_print(container.host_config.memory_reservation)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [55]: super_print(container.host_config.memory_swap)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [56]: super_print(container.host_config.memory_swappiness)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [57]: super_print(container.host_config.nano_cpus)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [58]: super_print(container.host_config.oom_kill_disable)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [59]: super_print(container.host_config.init)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [60]: super_print(container.host_config.pids_limit)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [61]: super_print(container.host_config.ulimits)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [62]: super_print(container.host_config.cpu_count)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [63]: super_print(container.host_config.cpu_percent)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [64]: super_print(container.host_config.binds)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [65]: super_print(container.host_config.container_id_file)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = .\n\nIn [66]: super_print(container.host_config.log_config.type)\ntype = &lt;class 'str'&gt;, value = json-file\n\nIn [67]: super_print(container.host_config.log_config.config)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [68]: super_print(container.host_config.network_mode)\ntype = &lt;class 'str'&gt;, value = bridge\n\nIn [69]: super_print(container.host_config.port_bindings)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [70]: super_print(container.host_config.restart_policy.name)\ntype = &lt;class 'str'&gt;, value = no\n\nIn [71]: super_print(container.host_config.restart_policy.maximum_retry_count)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [72]: super_print(container.host_config.auto_remove)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [73]: super_print(container.host_config.volume_driver)\ntype = &lt;class 'str'&gt;, value = \n\nIn [74]: super_print(container.host_config.volumes_from)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [75]: super_print(container.host_config.mounts)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [76]: super_print(container.host_config.capabilities)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [77]: super_print(container.host_config.cap_add)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [78]: super_print(container.host_config.cap_drop)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [79]: super_print(container.host_config.dns)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [80]: super_print(container.host_config.dns_options)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [81]: super_print(container.host_config.dns_search)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [82]: super_print(container.host_config.extra_hosts)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [83]: super_print(container.host_config.group_add)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [84]: super_print(container.host_config.ipc_mode)\ntype = &lt;class 'str'&gt;, value = private\n\nIn [85]: super_print(container.host_config.cgroup)\ntype = &lt;class 'str'&gt;, value = \n\nIn [86]: super_print(container.host_config.links)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [87]: super_print(container.host_config.oom_score_adj)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [88]: super_print(container.host_config.pid_mode)\ntype = &lt;class 'str'&gt;, value = \n\nIn [89]: super_print(container.host_config.privileged)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [90]: super_print(container.host_config.publish_all_ports)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [91]: super_print(container.host_config.readonly_rootfs)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [92]: super_print(container.host_config.security_opt)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [93]: super_print(container.host_config.storage_opt)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [94]: super_print(container.host_config.tmpfs)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [95]: super_print(container.host_config.uts_mode)\ntype = &lt;class 'str'&gt;, value = \n\nIn [96]: super_print(container.host_config.userns_mode)\ntype = &lt;class 'str'&gt;, value = \n\nIn [97]: super_print(container.host_config.shm_size)\ntype = &lt;class 'int'&gt;, value = 67108864\n\nIn [98]: super_print(container.host_config.sysctls)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [99]: super_print(container.host_config.runtime)\ntype = &lt;class 'str'&gt;, value = runc\n\nIn [100]: super_print(container.host_config.console_size)\ntype = &lt;class 'tuple'&gt;, value = (0, 0)\n\nIn [101]: super_print(container.host_config.isolation)\ntype = &lt;class 'str'&gt;, value = \n\nIn [102]: super_print(container.host_config.masked_paths)\ntype = &lt;class 'list'&gt;, value = [PosixPath('/proc/asound'), PosixPath('/proc/acpi'), PosixPath('/proc/interrupts'), PosixPath('/proc/kcore'), PosixPath('/proc/keys'), PosixPath('/proc/latency_stats'), PosixPath('/proc/timer_list'), PosixPath('/proc/timer_stats'), PosixPath('/proc/sched_debug'), PosixPath('/proc/scsi'), PosixPath('/sys/firmware'), PosixPath('/sys/devices/virtual/powercap')]\n\nIn [103]: super_print(container.host_config.readonly_paths)\ntype = &lt;class 'list'&gt;, value = [PosixPath('/proc/bus'), PosixPath('/proc/fs'), PosixPath('/proc/irq'), PosixPath('/proc/sys'), PosixPath('/proc/sysrq-trigger')]\n\nIn [104]: super_print(container.graph_driver.name)\ntype = &lt;class 'str'&gt;, value = overlay2\n\nIn [105]: super_print(container.graph_driver.data)\ntype = &lt;class 'dict'&gt;, value = {'ID': '8e0370255fc545f41e064b070c6a8c108341e31f3773203b3d33699d423897b9', 'LowerDir': '/var/lib/docker/overlay2/c556adbb78e86bb1f88c7d36679185019b6f4a49c45d5d4fd2e01a8967912d94-init/diff:/var/lib/docker/overlay2/6d443b7b284336ff3c1d0b3bc57495640f141533ee08417335e2437d821ef305/diff', 'MergedDir': '/var/lib/docker/overlay2/c556adbb78e86bb1f88c7d36679185019b6f4a49c45d5d4fd2e01a8967912d94/merged', 'UpperDir': '/var/lib/docker/overlay2/c556adbb78e86bb1f88c7d36679185019b6f4a49c45d5d4fd2e01a8967912d94/diff', 'WorkDir': '/var/lib/docker/overlay2/c556adbb78e86bb1f88c7d36679185019b6f4a49c45d5d4fd2e01a8967912d94/work'}\n\nIn [106]: super_print(container.size_rw)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [107]: super_print(container.size_root_fs)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [108]: super_print(container.mounts)\ntype = &lt;class 'list'&gt;, value = []\n\nIn [109]: super_print(container.config.hostname)\ntype = &lt;class 'str'&gt;, value = 8e0370255fc5\n\nIn [110]: super_print(container.config.domainname)\ntype = &lt;class 'str'&gt;, value = \n\nIn [111]: super_print(container.config.user)\ntype = &lt;class 'str'&gt;, value = \n\nIn [112]: super_print(container.config.attach_stdin)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [113]: super_print(container.config.attach_stdout)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [114]: super_print(container.config.attach_stderr)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [115]: super_print(container.config.exposed_ports)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [116]: super_print(container.config.tty)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [117]: super_print(container.config.open_stdin)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [118]: super_print(container.config.stdin_once)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [119]: super_print(container.config.env)\ntype = &lt;class 'list'&gt;, value = ['PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin']\n\nIn [120]: super_print(container.config.cmd)\ntype = &lt;class 'list'&gt;, value = ['sleep', 'infinity']\n\nIn [121]: super_print(container.config.healthcheck)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [122]: super_print(container.config.args_escaped)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [123]: super_print(container.config.image)\ntype = &lt;class 'str'&gt;, value = ubuntu\n\nIn [124]: super_print(container.config.volumes)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [125]: super_print(container.config.working_dir)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = .\n\nIn [126]: super_print(container.config.entrypoint)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [127]: super_print(container.config.network_disabled)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [128]: super_print(container.config.mac_address)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [129]: super_print(container.config.on_build)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [130]: super_print(container.config.labels)\ntype = &lt;class 'dict'&gt;, value = {'org.opencontainers.image.ref.name': 'ubuntu', 'org.opencontainers.image.version': '24.04'}\n\nIn [131]: super_print(container.config.stop_signal)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [132]: super_print(container.config.stop_timeout)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [133]: super_print(container.config.shell)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [134]: super_print(container.network_settings.bridge)\ntype = &lt;class 'str'&gt;, value = \n\nIn [135]: super_print(container.network_settings.sandbox_id)\ntype = &lt;class 'str'&gt;, value = b6afee97a97ade49f273320da640d2b83d591ebbc9881367c4e82b91ec3d5ec6\n\nIn [136]: super_print(container.network_settings.hairpin_mode)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [137]: super_print(container.network_settings.link_local_ipv6_address)\ntype = &lt;class 'str'&gt;, value = \n\nIn [138]: super_print(container.network_settings.link_local_ipv6_prefix_length)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [139]: super_print(container.network_settings.ports)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [140]: super_print(container.network_settings.sandbox_key)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = /var/run/docker/netns/b6afee97a97a\n\nIn [141]: super_print(container.network_settings.secondary_ip_addresses)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [142]: super_print(container.network_settings.secondary_ipv6_addresses)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [143]: super_print(container.network_settings.endpoint_id)\ntype = &lt;class 'str'&gt;, value = 0e26168ace0942e4dfe10606cdf8a78b3a00d0374c5cefa10b50a47ff30f0127\n\nIn [144]: super_print(container.network_settings.gateway)\ntype = &lt;class 'str'&gt;, value = 172.17.0.1\n\nIn [145]: super_print(container.network_settings.global_ipv6_address)\ntype = &lt;class 'str'&gt;, value = \n\nIn [146]: super_print(container.network_settings.global_ipv6_prefix_length)\ntype = &lt;class 'int'&gt;, value = 0\n\nIn [147]: super_print(container.network_settings.ip_address)\ntype = &lt;class 'str'&gt;, value = 172.17.0.2\n\nIn [148]: super_print(container.network_settings.ip_prefix_length)\ntype = &lt;class 'int'&gt;, value = 16\n\nIn [149]: super_print(container.network_settings.ipv6_gateway)\ntype = &lt;class 'str'&gt;, value = \n\nIn [150]: super_print(container.network_settings.mac_address)\ntype = &lt;class 'str'&gt;, value = 2e:43:6c:c6:ca:dd\n\nIn [151]: super_print(container.network_settings.networks)\ntype = &lt;class 'dict'&gt;, value = {'bridge': NetworkInspectResult(ipam_config=None, links=None, aliases=None, network_id='f24822db0aaaeb9d49ce8fdb805e40d2b2de98fd0c31e431982dbe023abc3d39', endpoint_id='0e26168ace0942e4dfe10606cdf8a78b3a00d0374c5cefa10b50a47ff30f0127', gateway='172.17.0.1', ip_address='172.17.0.2', ip_prefix_length=16, ipv6_gateway='', global_ipv6_address='', global_ipv6_prefix_length=0, mac_address='2e:43:6c:c6:ca:dd', driver_options=None)}\n</code></pre>"},{"location":"objects/containers/#methods","title":"Methods","text":""},{"location":"objects/containers/#python_on_whales.Container","title":"Container","text":""},{"location":"objects/containers/#python_on_whales.Container.attach","title":"attach","text":"<pre><code>attach(detach_keys=None, stdin=True, sig_proxy=True)\n</code></pre> <p>Attach local standard input, output, and error streams to a running container.</p> <p>Alias: <code>docker.attach(...)</code></p> <p>See the <code>docker.container.attach</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.commit","title":"commit","text":"<pre><code>commit(tag=None, author=None, message=None, pause=True)\n</code></pre> <p>Create a new image from the container's changes.</p> <p>Alias: <code>docker.commit(...)</code></p> <p>See the <code>docker.container.commit</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.diff","title":"diff","text":"<pre><code>diff()\n</code></pre> <p>Returns the diff of this container filesystem.</p> <p>See the <code>docker.container.diff</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.execute","title":"execute","text":"<pre><code>execute(command, detach=False, envs={}, env_files=(), interactive=False, privileged=False, tty=False, user=None, workdir=None, stream=False, detach_keys=None)\n</code></pre> <p>Execute a command in this container</p> <p>See the <code>docker.container.execute</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the docker container exists and <code>False</code> if it doesn't exists.</p> <p>If it doesn't exists, it most likely mean that it was removed.</p> <p>See the <code>docker.container.exists</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.export","title":"export","text":"<pre><code>export(output)\n</code></pre> <p>Export this container filesystem.</p> <p>See the <code>docker.container.export</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.init","title":"init","text":"<pre><code>init()\n</code></pre> <p>Initialize this container.</p> <p>See the <code>docker.container.init</code> command.</p>"},{"location":"objects/containers/#python_on_whales.Container.kill","title":"kill","text":"<pre><code>kill(signal=None)\n</code></pre> <p>Kill this container</p> <p>See the <code>docker.container.kill</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.logs","title":"logs","text":"<pre><code>logs(*, details=False, since=None, tail=None, timestamps=False, until=None)\n</code></pre> <p>Returns the logs of the container</p> <p>See the <code>docker.container.logs</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.pause","title":"pause","text":"<pre><code>pause()\n</code></pre> <p>Pause this container.</p> <p>See the <code>docker.container.pause</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.remove","title":"remove","text":"<pre><code>remove(force=False, volumes=False)\n</code></pre> <p>Remove this container.</p> <p>See the <code>docker.container.remove</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.rename","title":"rename","text":"<pre><code>rename(new_name)\n</code></pre> <p>Rename this container</p> <p>See the <code>docker.container.rename</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.restart","title":"restart","text":"<pre><code>restart(time=None)\n</code></pre> <p>Restarts this container.</p> <p>See the <code>docker.container.restart</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.start","title":"start","text":"<pre><code>start(attach=False, interactive=False, stream=False, detach_keys=None)\n</code></pre> <p>Starts this container.</p> <p>See the <code>docker.container.start</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.stop","title":"stop","text":"<pre><code>stop(time=None)\n</code></pre> <p>Stops this container.</p> <p>See the <code>docker.container.stop</code> command for information about the arguments.</p>"},{"location":"objects/containers/#python_on_whales.Container.unpause","title":"unpause","text":"<pre><code>unpause()\n</code></pre> <p>Unpause the container</p> <p>See the <code>docker.container.unpause</code> command for information about the arguments.</p>"},{"location":"objects/images/","title":"Docker images","text":"<p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_image = docker.image.inspect(\"my-image-name\")\n\n# or\n\nmy_docker_image = docker.pull(\"my-image-name\")\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import docker, Image\n\ndef print_dodo(image: Image):\n    print(docker.run(image, [\"echo\", \"dodo\"]))\n</code></pre>"},{"location":"objects/images/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker image inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: image = docker.pull(\"ubuntu\")\n20.04: Pulling from library/ubuntu\n6a5697faee43: Pull complete\nba13d3bc422b: Pull complete\na254829d9e55: Pull complete\nDigest: sha256:fff16eea1a8ae92867721d90c59a75652ea66d29c05294e6e2f898704bdb8cf1\nStatus: Downloaded newer image for ubuntu:latest\ndocker.io/library/ubuntu:latest\n\nIn [3]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [4]: super_print(image.id)\ntype = &lt;class 'str'&gt;, value = sha256:97bed23a34971024aa8d254abbe67b7168772340d1f494034773bc464e8dd5b6\n\nIn [5]: super_print(image.repo_tags)\ntype = &lt;class 'list'&gt;, value = ['ubuntu:latest']\n\nIn [6]: super_print(image.repo_digests)\ntype = &lt;class 'list'&gt;, value = ['ubuntu@sha256:66460d557b25769b102175144d538d88219c077c678a49af4afca6fbfc1b5252']\n\nIn [7]: super_print(image.parent)\ntype = &lt;class 'str'&gt;, value = \n\nIn [8]: super_print(image.comment)\ntype = &lt;class 'str'&gt;, value = \n\nIn [9]: super_print(image.created)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-01 13:01:37.838375+00:00\n\nIn [10]: super_print(image.container)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [11]: super_print(image.container_config)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [12]: super_print(image.docker_version)\ntype = &lt;class 'str'&gt;, value = 26.1.3\n\nIn [13]: super_print(image.author)\ntype = &lt;class 'str'&gt;, value = \n\nIn [14]: super_print(image.config)\ntype = &lt;class 'python_on_whales.components.container.models.ContainerConfig'&gt;, value = hostname='' domainname='' user='' attach_stdin=False attach_stdout=False attach_stderr=False exposed_ports=None tty=False open_stdin=False stdin_once=False env=['PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'] cmd=['/bin/bash'] healthcheck=None args_escaped=None image='sha256:23fd913d7c4cf84a6e1172185a7b36958f2b8b84fedafff8fc952b31c9cb161f' volumes=None working_dir=PosixPath('.') entrypoint=None network_disabled=None mac_address=None on_build=None labels={'org.opencontainers.image.ref.name': 'ubuntu', 'org.opencontainers.image.version': '24.04'} stop_signal=None stop_timeout=None shell=None systemd_mode=None\n\nIn [15]: super_print(image.architecture)\ntype = &lt;class 'str'&gt;, value = amd64\n\nIn [16]: super_print(image.os)\ntype = &lt;class 'str'&gt;, value = linux\n\nIn [17]: super_print(image.os_version)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [18]: super_print(image.size)\ntype = &lt;class 'int'&gt;, value = 78119250\n\nIn [19]: super_print(image.virtual_size)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [20]: super_print(image.graph_driver.name)\ntype = &lt;class 'str'&gt;, value = overlay2\n\nIn [21]: super_print(image.graph_driver.data)\ntype = &lt;class 'dict'&gt;, value = {'MergedDir': '/var/lib/docker/overlay2/6d443b7b284336ff3c1d0b3bc57495640f141533ee08417335e2437d821ef305/merged', 'UpperDir': '/var/lib/docker/overlay2/6d443b7b284336ff3c1d0b3bc57495640f141533ee08417335e2437d821ef305/diff', 'WorkDir': '/var/lib/docker/overlay2/6d443b7b284336ff3c1d0b3bc57495640f141533ee08417335e2437d821ef305/work'}\n\nIn [22]: super_print(image.root_fs.type)\ntype = &lt;class 'str'&gt;, value = layers\n\nIn [23]: super_print(image.root_fs.layers)\ntype = &lt;class 'list'&gt;, value = ['sha256:073ec47a8c22dcaa4d6e5758799ccefe2f9bde943685830b1bf6fd2395f5eabc']\n\nIn [24]: super_print(image.root_fs.base_layer)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [25]: super_print(image.metadata)\ntype = &lt;class 'dict'&gt;, value = {'LastTagTime': '0001-01-01T00:00:00Z'}\n</code></pre>"},{"location":"objects/images/#methods","title":"Methods","text":""},{"location":"objects/images/#python_on_whales.Image","title":"Image","text":""},{"location":"objects/images/#python_on_whales.Image.copy_from","title":"copy_from","text":"<pre><code>copy_from(path_in_image, destination, pull='missing')\n</code></pre> <p>Copy a file from a docker image in the local filesystem.</p> <p>See the <code>docker.image.copy_from</code> command for information about the arguments.</p>"},{"location":"objects/images/#python_on_whales.Image.copy_to","title":"copy_to","text":"<pre><code>copy_to(local_path, path_in_image, new_tag=None, pull='missing')\n</code></pre> <p>Copy a file from the local filesystem in a docker image to create a new docker image.</p> <p>As if you did a dockerfile with a COPY instruction.</p> <p>See the <code>docker.image.copy_to</code> command for information about the arguments.</p>"},{"location":"objects/images/#python_on_whales.Image.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the docker image exists and <code>False</code> if it doesn't exists.</p> <p>Note that you might have done <code>docker.image.remove(\"some_tag\")</code> and the image might still exists because python-on-whales references images by id, not by tag.</p> <p>See the <code>docker.image.exists</code> command for information about the arguments.</p>"},{"location":"objects/images/#python_on_whales.Image.remove","title":"remove","text":"<pre><code>remove(force=False, prune=True)\n</code></pre> <p>Remove this Docker image.</p> <p>See the <code>docker.image.remove</code> command for information about the arguments.</p>"},{"location":"objects/images/#python_on_whales.Image.save","title":"save","text":"<pre><code>save(output=None)\n</code></pre> <p>Saves this Docker image in a tar.</p> <p>See the <code>docker.image.save</code> command for information about the arguments.</p>"},{"location":"objects/images/#python_on_whales.Image.tag","title":"tag","text":"<pre><code>tag(new_tag)\n</code></pre> <p>Add a tag to a Docker image.</p> <p>See the <code>docker.image.tag</code> command for information about the arguments.</p>"},{"location":"objects/networks/","title":"Docker networks","text":"<p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_network = docker.network.create(\"some-network\")\n\nmy_network = docker.container.inspect(\"some-network\")\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Network, docker\n\ndef ping_hostname_in_network(my_network: Network):\n    docker.run(\"busybox\", [\"ping\", \"-c\", \"10\", \"my_hostname\"], networks=[my_network])\n</code></pre>"},{"location":"objects/networks/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker network inspect ...</code></p> <p>If you want to know the exact structure, you can go to the  <code>docker network inspect</code> reference page and click on \"200 no error\". An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: network = docker.network.create(\"my-network\")\n\nIn [3]: container = docker.run(\n            \"ubuntu\", [\"sleep\", \"infinity\"], name=\"my_ubuntu\", detach=True, networks=[network]\n        )\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [5]: super_print(network.name)\ntype = &lt;class 'str'&gt;, value = my-network\n\nIn [6]: super_print(network.id)\ntype = &lt;class 'str'&gt;, value = d6a6a9433070d66413c292b8522a0818a5c90ec519ca513a46eae92a05dba362\n\nIn [7]: super_print(network.created)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:17.991521+00:00\n\nIn [8]: super_print(network.scope)\ntype = &lt;class 'str'&gt;, value = local\n\nIn [9]: super_print(network.driver)\ntype = &lt;class 'str'&gt;, value = bridge\n\nIn [10]: super_print(network.enable_ipv6)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [11]: super_print(network.ipam.driver)\ntype = &lt;class 'str'&gt;, value = default\n\nIn [12]: super_print(network.ipam.config)\ntype = &lt;class 'list'&gt;, value = [{'Subnet': '172.19.0.0/16', 'Gateway': '172.19.0.1'}]\n\nIn [13]: super_print(network.ipam.options)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [14]: super_print(network.internal)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [15]: super_print(network.attachable)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [16]: super_print(network.ingress)\ntype = &lt;class 'bool'&gt;, value = False\n\nIn [17]: super_print(network.containers)\ntype = &lt;class 'dict'&gt;, value = {'30f8a220c0595b149526600b1bb9c9a8cd5e76d2a1e0437cdd218fd214349031': NetworkContainer(name='my_ubuntu', endpoint_id='0b09bd47e473f21543ccc98548056ae2f878338a86622c661845262799942545', mac_address='ba:51:2c:9a:ad:15', ipv4_address='172.19.0.2/16', ipv6_address='')}\n\nIn [18]: super_print(network.options)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [19]: super_print(network.labels)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [20]: super_print(network.config_from)\ntype = &lt;class 'dict'&gt;, value = {'Network': ''}\n\nIn [21]: super_print(network.config_only)\ntype = &lt;class 'bool'&gt;, value = False\n</code></pre>"},{"location":"objects/networks/#methods","title":"Methods","text":""},{"location":"objects/networks/#python_on_whales.Network","title":"Network","text":""},{"location":"objects/networks/#python_on_whales.Network.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the network exists and <code>False</code> if it doesn't exist.</p> <p>If it doesn't exist, that most likely means it was removed.</p>"},{"location":"objects/networks/#python_on_whales.Network.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Removes this Docker network.</p> <p>Rather than removing it manually, you can use a context manager to make sure the network is deleted even if an exception is raised.</p> <pre><code>from python_on_whales import docker\n\nwith docker.network.create(\"some_name\") as my_net:\n    docker.run(\n        \"busybox\",\n        [\"ping\", \"idonotexistatall.com\"],\n        networks=[my_net],\n        remove=True,\n    )\n    # an exception will be raised because the container will fail\n    # but the network will be removed anyway.\n</code></pre>"},{"location":"objects/nodes/","title":"Docker nodes","text":"<p>Nodes in Docker swarm</p> <p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_image = docker.node.inspect(\"my-node-name\")\n\nlist_of_nodes = docker.node.list()\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Node\n\ndef print_state(node: Node):\n    print(node.status.state)\n</code></pre>"},{"location":"objects/nodes/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker node inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: docker.swarm.init()\n\nIn [3]: docker.node.list()[0]\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type = {type(obj)}, value = {obj}\")\n   ...:\n\nIn [4]: super_print(node.id)\ntype = &lt;class 'str'&gt;, value = qtdyaicqgt0mxgf24w6rcxnm2\n\nIn [5]: super_print(node.version.index)\ntype = &lt;class 'int'&gt;, value = 9\n\nIn [6]: super_print(node.created_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:41.094691+00:00\n\nIn [7]: super_print(node.updated_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:41.699340+00:00\n\nIn [8]: super_print(node.spec.name)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [9]: super_print(node.spec.labels)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [10]: super_print(node.spec.role)\ntype = &lt;class 'str'&gt;, value = manager\n\nIn [11]: super_print(node.spec.availability)\ntype = &lt;class 'str'&gt;, value = active\n\nIn [12]: super_print(node.description.hostname)\ntype = &lt;class 'str'&gt;, value = runnervmwhb2z\n\nIn [13]: super_print(node.description.platform.architecture)\ntype = &lt;class 'str'&gt;, value = x86_64\n\nIn [14]: super_print(node.description.platform.os)\ntype = &lt;class 'str'&gt;, value = linux\n\nIn [15]: super_print(node.description.resources.nano_cpus)\ntype = &lt;class 'int'&gt;, value = 4000000000\n\nIn [16]: super_print(node.description.resources.memory_bytes)\ntype = &lt;class 'int'&gt;, value = 16772579328\n\nIn [17]: super_print(node.description.resources.generic_resources)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [18]: super_print(node.description.engine.engine_version)\ntype = &lt;class 'str'&gt;, value = 28.0.4\n\nIn [19]: super_print(node.description.engine.labels)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [20]: super_print(node.description.engine.plugins)\ntype = &lt;class 'list'&gt;, value = [EnginePlugin(type='Log', name='awslogs'), EnginePlugin(type='Log', name='fluentd'), EnginePlugin(type='Log', name='gcplogs'), EnginePlugin(type='Log', name='gelf'), EnginePlugin(type='Log', name='journald'), EnginePlugin(type='Log', name='json-file'), EnginePlugin(type='Log', name='local'), EnginePlugin(type='Log', name='splunk'), EnginePlugin(type='Log', name='syslog'), EnginePlugin(type='Network', name='bridge'), EnginePlugin(type='Network', name='host'), EnginePlugin(type='Network', name='ipvlan'), EnginePlugin(type='Network', name='macvlan'), EnginePlugin(type='Network', name='null'), EnginePlugin(type='Network', name='overlay'), EnginePlugin(type='Volume', name='local'), EnginePlugin(type='Volume', name='mochoa/s3fs-volume-plugin:latest')]\n\nIn [21]: super_print(node.description.tls_info.trust_root)\ntype = &lt;class 'str'&gt;, value = -----BEGIN CERTIFICATE-----\nMIIBajCCARCgAwIBAgIUOiyUGRhuBdaLC5c4KjllYVcjuDEwCgYIKoZIzj0EAwIw\nEzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMjUxMDI0MDkwMzAwWhcNNDUxMDE5MDkw\nMzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH\nA0IABLlNbVSzqthiWc0clk4Nhk8YARSfvNVGHWbA5Av8e/aDru2fByTLNPbqmInl\nyRq3oHSMrTM0tnBySFfBAbNoUimjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB\nAf8EBTADAQH/MB0GA1UdDgQWBBRVgZOKFeEL9oNwmB5qI0KX9hieJTAKBggqhkjO\nPQQDAgNIADBFAiBL9bR4CRy4dY0r6PfkP2fvlUMz1I3xW4xuOmEreSxIcwIhAPyr\nQ9L5FZsx7I+Xnf0oUZhVUPM+Am2adJnw6JCJ14QS\n-----END CERTIFICATE-----\n\n\nIn [22]: super_print(node.description.tls_info.cert_issuer_subject)\ntype = &lt;class 'str'&gt;, value = MBMxETAPBgNVBAMTCHN3YXJtLWNh\n\nIn [23]: super_print(node.description.tls_info.cert_issuer_public_key)\ntype = &lt;class 'str'&gt;, value = MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuU1tVLOq2GJZzRyWTg2GTxgBFJ+81UYdZsDkC/x79oOu7Z8HJMs09uqYieXJGregdIytMzS2cHJIV8EBs2hSKQ==\n\nIn [24]: super_print(node.status.state)\ntype = &lt;class 'str'&gt;, value = ready\n\nIn [25]: super_print(node.status.message)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [26]: super_print(node.status.addr)\ntype = &lt;class 'str'&gt;, value = 10.1.0.240\n\nIn [27]: super_print(node.manager_status.leader)\ntype = &lt;class 'bool'&gt;, value = True\n\nIn [28]: super_print(node.manager_status.reachability)\ntype = &lt;class 'str'&gt;, value = reachable\n\nIn [29]: super_print(node.manager_status.addr)\ntype = &lt;class 'str'&gt;, value = 10.1.0.240:2377\n</code></pre>"},{"location":"objects/nodes/#methods","title":"Methods","text":""},{"location":"objects/nodes/#python_on_whales.Node","title":"Node","text":""},{"location":"objects/nodes/#python_on_whales.Node.ps","title":"ps","text":"<pre><code>ps()\n</code></pre> <p>Returns the list of tasks running on this node</p>"},{"location":"objects/nodes/#python_on_whales.Node.ps--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Task]` object.\n</code></pre>"},{"location":"objects/nodes/#python_on_whales.Node.update","title":"update","text":"<pre><code>update(availability=None, labels_add={}, rm_labels=[], role=None)\n</code></pre> <p>Updates this Swarm node.</p> <p>See <code>docker.node.update</code> for more information about the arguments.</p>"},{"location":"objects/plugins/","title":"Docker plugins","text":"<p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_plugin = docker.plugin.install(\"vieux/sshfs:latest\")\n# or\nmy_docker_plugin = docker.plugin.inspect(\"vieux/sshfs:latest\")\n# or\nlist_of_plugins = docker.plugins.list()\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Plugin\n\ndef print_name(plugin: Plugin):\n    print(plugin.name)\n</code></pre>"},{"location":"objects/plugins/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker plugin inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: plugin = docker.plugin.install(\"vieux/sshfs:latest\")\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type = {type(obj)}, value = {obj}\")\n   ...:\n\nIn [4]: super_print(plugin.id)\ntype = &lt;class 'str'&gt;, value = daa74b3c50a1674a69f9459faa8ee4d2cf44e352c8dc88e3791e9fe76d97220b\n\nIn [5]: super_print(plugin.name)\ntype = &lt;class 'str'&gt;, value = mochoa/s3fs-volume-plugin:latest\n\nIn [6]: super_print(plugin.enabled)\ntype = &lt;class 'bool'&gt;, value = True\n\nIn [7]: super_print(plugin.settings)\ntype = &lt;class 'python_on_whales.components.plugin.models.PluginSettings'&gt;, value = mounts=[] env=['AWSACCESSKEYID=', 'AWSSECRETACCESSKEY=', 'DEFAULT_S3FSOPTS=nomultipart,use_path_request_style'] args=[] devices=[PluginDevice()]\n\nIn [8]: super_print(plugin.plugin_reference)\ntype = &lt;class 'str'&gt;, value = docker.io/mochoa/s3fs-volume-plugin:latest\n\nIn [9]: super_print(plugin.config)\ntype = &lt;class 'python_on_whales.components.plugin.models.PluginConfig'&gt;, value = docker_version='19.03.15' description='S3FS plugin for Docker v2.0.9' documentation='https://github.com/marcelo-ochoa/docker-volume-plugins/' interface=Interface() entrypoint=['/usr/bin/tini', '--', '/s3fs-volume-plugin'] work_dir=''\n</code></pre>"},{"location":"objects/plugins/#methods","title":"Methods","text":""},{"location":"objects/plugins/#python_on_whales.Plugin","title":"Plugin","text":""},{"location":"objects/plugins/#python_on_whales.Plugin.disable","title":"disable","text":"<pre><code>disable(force=False)\n</code></pre> <p>Disable this plugin</p>"},{"location":"objects/plugins/#python_on_whales.Plugin.enable","title":"enable","text":"<pre><code>enable(timeout=None)\n</code></pre> <p>Enable this plugin</p>"},{"location":"objects/plugins/#python_on_whales.Plugin.push","title":"push","text":"<pre><code>push(disable_content_trust=True)\n</code></pre> <p>Push this plugin</p>"},{"location":"objects/plugins/#python_on_whales.Plugin.remove","title":"remove","text":"<pre><code>remove(force=False)\n</code></pre> <p>Remove this plugin</p>"},{"location":"objects/plugins/#python_on_whales.Plugin.set","title":"set","text":"<pre><code>set(configuration)\n</code></pre> <p>Set the configuration for this plugin</p>"},{"location":"objects/plugins/#python_on_whales.Plugin.upgrade","title":"upgrade","text":"<pre><code>upgrade(remote=None, disable_content_trust=True, skip_remote_check=False)\n</code></pre> <p>Upgrade this plugin</p>"},{"location":"objects/pods/","title":"Podman pods","text":"<p>Don't use the constructor directly. Instead use <pre><code>from python_on_whales import DockerClient\n\npodman = DockerClient(client_call=[\"podman\"])\n\nmy_pod = podman.pod.inspect(\"my-pod-name\")\n\n# or\n\nmy_pod = podman.pod.create(\"my-pod-name\")\n</code></pre></p> <p>For type hints, use this <pre><code>from python_on_whales import Pod\n\ndef print_container_names(pod: Pod):\n    print([ctr.name for ctr in pod.containers])\n</code></pre></p>"},{"location":"objects/pods/#attributes","title":"Attributes","text":"<p>The attributes are the same that you get with the command line: <code>podman pod inspect ...</code></p> <p>If you want to know the exact structure, you can go to the <code>podman pod inspect</code> reference page</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import DockerClient\n\nIn [2]: podman = DockerClient(client_call=[\"podman\"])\n\nIn [3]: pod = podman.pod.create(\"my-pod\")\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [5]: super_print(pod.id)\ntype = &lt;class 'str'&gt;, value = 4a5b3ad1655b394d25e9678d9688712183ccba1b43ec7f091c852d5c69f19934\n\nIn [6]: super_print(pod.name)\ntype = &lt;class 'str'&gt;, value = my-pod\n\nIn [7]: super_print(pod.created)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:49.358680+00:00\n\nIn [8]: super_print(pod.state)\ntype = &lt;class 'str'&gt;, value = Created\n\nIn [9]: super_print(pod.num_containers)\ntype = &lt;class 'int'&gt;, value = 1\n\nIn [10]: super_print(pod.infra_container_id)\ntype = &lt;class 'str'&gt;, value = a15bfa2c670c4c4f4ed788fc84d88f73a18131847c0fe06c0bccffa89e44e627\n\nIn [11]: super_print(pod.shared_namespaces)\ntype = &lt;class 'list'&gt;, value = ['uts', 'ipc', 'net']\n\nIn [12]: super_print(pod.hostname)\ntype = &lt;class 'str'&gt;, value = \n\nIn [13]: super_print(pod.exit_policy)\ntype = &lt;class 'str'&gt;, value = continue\n</code></pre>"},{"location":"objects/pods/#methods","title":"Methods","text":""},{"location":"objects/pods/#python_on_whales.Pod","title":"Pod","text":""},{"location":"objects/pods/#python_on_whales.Pod.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the pod exists and <code>False</code> if not.</p> <p>See the <code>podman.pod.exists</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.kill","title":"kill","text":"<pre><code>kill(*, signal=None)\n</code></pre> <p>Kill this pod</p> <p>See the <code>podman.pod.kill</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.logs","title":"logs","text":"<pre><code>logs(container=None, *, names=False, since=None, tail=None, timestamps=False, until=None, follow=False, stream=False)\n</code></pre> <p>Returns the logs of the pod containers</p> <p>See the <code>podman.pod.logs</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.pause","title":"pause","text":"<pre><code>pause()\n</code></pre> <p>Pause this pod.</p> <p>See the <code>podman.pod.pause</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.remove","title":"remove","text":"<pre><code>remove(*, force=False, time=None)\n</code></pre> <p>Remove this pod.</p> <p>See the <code>podman.pod.remove</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.restart","title":"restart","text":"<pre><code>restart()\n</code></pre> <p>Restart this pod.</p> <p>See the <code>podman.pod.restart</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Starts this pod.</p> <p>See the <code>podman.pod.start</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.stop","title":"stop","text":"<pre><code>stop(*, time=None)\n</code></pre> <p>Stops this pod.</p> <p>See the <code>podman.pod.stop</code> command for information about the arguments.</p>"},{"location":"objects/pods/#python_on_whales.Pod.unpause","title":"unpause","text":"<pre><code>unpause()\n</code></pre> <p>Unpause the pod</p> <p>See the <code>podman.pod.unpause</code> command for information about the arguments.</p>"},{"location":"objects/secrets/","title":"Secrets","text":""},{"location":"objects/secrets/#python_on_whales.Secret","title":"Secret","text":""},{"location":"objects/secrets/#python_on_whales.Secret.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Remove this Docker secret.</p> <p>See the <code>docker.secret.remove</code> command for information about the arguments.</p>"},{"location":"objects/services/","title":"Docker services","text":"<p>Services in Docker swarm</p> <p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_service = docker.service.inspect(\"my-service\")\n\nmy_docker_service = docker.service.create(\"busybox\", [\"ping\", \"www.google.com\"])\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Service\n\ndef print_creation_time(some_service: Service):\n    print(some_service.created_at)\n</code></pre>"},{"location":"objects/services/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker service inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: docker.swarm.init()\n\nIn [3]: my_service = docker.service.create(\"busybox\", [\"ping\", \"www.google.com\"])\n\nIn [4]: def super_print(obj):\n   ...:     print(f\"type = {type(obj)}, value = {obj}\")\n   ...:\n\nIn [4]: super_print(service.id)\ntype = &lt;class 'str'&gt;, value = j2a08lebrqd3s4rpifdiv53aj\n\nIn [5]: super_print(service.version)\ntype = &lt;class 'python_on_whales.components.service.models.ServiceVersion'&gt;, value = index=11\n\nIn [6]: super_print(service.created_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:42.790289+00:00\n\nIn [7]: super_print(service.updated_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:42.790289+00:00\n\nIn [8]: super_print(service.spec.name)\ntype = &lt;class 'str'&gt;, value = competent_ramanujan\n\nIn [9]: super_print(service.spec.labels)\ntype = &lt;class 'dict'&gt;, value = {}\n\nIn [10]: super_print(service.spec.mode)\ntype = &lt;class 'dict'&gt;, value = {'Replicated': {'Replicas': 1}}\n\nIn [11]: super_print(service.spec.update_config)\ntype = &lt;class 'python_on_whales.components.service.models.ChangeConfig'&gt;, value = parallelism=1 failure_action='pause' monitor=5000000000 max_failure_ratio=0.0 order='stop-first'\n\nIn [12]: super_print(service.spec.rollback_config)\ntype = &lt;class 'python_on_whales.components.service.models.ChangeConfig'&gt;, value = parallelism=1 failure_action='pause' monitor=5000000000 max_failure_ratio=0.0 order='stop-first'\n\nIn [13]: super_print(service.spec.task_template.container_spec.image)\ntype = &lt;class 'str'&gt;, value = busybox:latest@sha256:2f590fc602ce325cbff2ccfc39499014d039546dc400ef8bbf5c6ffb860632e7\n\nIn [14]: super_print(service.spec.task_template.container_spec.labels)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [15]: super_print(service.spec.task_template.container_spec.privileges)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [16]: super_print(service.spec.task_template.container_spec.stop_grace_period)\ntype = &lt;class 'int'&gt;, value = 10000000000\n\nIn [17]: super_print(service.spec.task_template.container_spec.isolation)\ntype = &lt;class 'str'&gt;, value = default\n\nIn [18]: super_print(service.spec.task_template.container_spec.env)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [19]: super_print(service.spec.task_template.resources.limits)\ntype = &lt;class 'python_on_whales.components.service.models.CPUMemoryQuotas'&gt;, value = nano_cpus=None memory_bytes=None\n\nIn [20]: super_print(service.spec.task_template.resources.reservations)\ntype = &lt;class 'python_on_whales.components.service.models.CPUMemoryQuotas'&gt;, value = nano_cpus=None memory_bytes=None\n\nIn [21]: super_print(service.previous_spec)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [22]: super_print(service.endpoint.spec)\ntype = &lt;class 'python_on_whales.components.service.models.ServiceEndpointSpec'&gt;, value = mode=None ports=None\n\nIn [23]: super_print(service.endpoint.ports)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [24]: super_print(service.endpoint.virtual_ips)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [25]: super_print(service.update_status)\ntype = &lt;class 'NoneType'&gt;, value = None\n</code></pre>"},{"location":"objects/services/#methods","title":"Methods","text":""},{"location":"objects/services/#python_on_whales.Service","title":"Service","text":""},{"location":"objects/services/#python_on_whales.Service.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the service is still present in the swarm, <code>False</code> if the service has been removed.</p>"},{"location":"objects/services/#python_on_whales.Service.ps","title":"ps","text":"<pre><code>ps()\n</code></pre> <p>Returns the list of tasks of this service.</p>"},{"location":"objects/services/#python_on_whales.Service.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Removes this service</p> <p>It's also possible to use a service as a context manager. By using a context manager, you ensures that the service will be removed even if an exception occurs.</p> <pre><code>from python_on_whales import docker\n\ndocker.swarm.init()\nwith docker.service.create(\"ubuntu\", [\"sleep\", \"infinity\"]) as my_service:\n    print(\"I'm doing things with the service here\")\n    print(my_service.update_status)\n\nprint(\"I'm out of the context manager, the service has been removed.\")\n</code></pre>"},{"location":"objects/services/#python_on_whales.Service.scale","title":"scale","text":"<pre><code>scale(new_scale, detach=False)\n</code></pre> <p>Change the scale of a service.</p> <p>See the <code>docker.service.scale</code> command for information about the arguments.</p>"},{"location":"objects/services/#python_on_whales.Service.update","title":"update","text":"<pre><code>update(detach=False, force=False, image=None, with_registry_authentication=False, quiet=False, replicas=None)\n</code></pre> <p>Updates a service</p> <p>See the <code>docker.service.update</code> command for information about the arguments.</p>"},{"location":"objects/stacks/","title":"Stacks","text":""},{"location":"objects/stacks/#python_on_whales.Stack","title":"Stack","text":""},{"location":"objects/tasks/","title":"Docker tasks","text":"<p>Tasks in Docker swarm</p> <p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_task = docker.task.inspect(\"some-task-id\")\n\nmy_tasks_list = docker.service.ps(\"my-service\")\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import Task\n\ndef print_creation_time(some_task: Task):\n    print(some_task.created_at)\n</code></pre>"},{"location":"objects/tasks/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker inspect &lt;task-id&gt;</code></p> <p>To get a complete description of those attributes, you  can take a look at the daemon api reference page  and click on \"200 No error\".</p>"},{"location":"objects/volumes/","title":"Docker volumes","text":"<p>Don't use the constructor directly. Instead use  <pre><code>from python_on_whales import docker\n\nmy_docker_volume = docker.volume.inspect(\"my-volume\")\n\n# or\n\nmy_docker_image = docker.volume.create()\n</code></pre> For type hints, use this</p> <pre><code>from python_on_whales import docker, Volume\n\ndef print_file(my_volume: Volume):\n    print(\n        docker.run(\n            \"ubuntu\", \n            [\"cat\", \"/some_volume/some_file\"],\n            volumes=[(my_volume, \"/some_volume/some_file\")]\n        )\n    )\n</code></pre>"},{"location":"objects/volumes/#attributes","title":"Attributes","text":"<p>It attributes are the same that you get with the command line: <code>docker volume inspect ...</code></p> <p>To get a complete description of those attributes, you  can take a look at  the daemon api reference page  and click on \"200 No error\".</p> <p>An example is worth many lines of descriptions.</p> <pre><code>In [1]: from python_on_whales import docker\n\nIn [2]: volume = docker.volume.create()\n\nIn [3]: def super_print(obj):\n   ...:     print(f\"type={type(obj)}, value={obj}\")\n   ...:\n\nIn [4]: super_print(volume.name)\ntype = &lt;class 'str'&gt;, value = 488287cbe19df71215a9788b2024123c0f9479f5325d040d6dfa672013285224\n\nIn [5]: super_print(volume.driver)\ntype = &lt;class 'str'&gt;, value = local\n\nIn [6]: super_print(volume.mountpoint)\ntype = &lt;class 'pathlib.PosixPath'&gt;, value = /var/lib/docker/volumes/488287cbe19df71215a9788b2024123c0f9479f5325d040d6dfa672013285224/_data\n\nIn [7]: super_print(volume.created_at)\ntype = &lt;class 'datetime.datetime'&gt;, value = 2025-10-24 09:07:30+00:00\n\nIn [8]: super_print(volume.status)\ntype = &lt;class 'NoneType'&gt;, value = None\n\nIn [9]: super_print(volume.labels)\ntype = &lt;class 'dict'&gt;, value = {'com.docker.volume.anonymous': ''}\n\nIn [10]: super_print(volume.scope)\ntype = &lt;class 'str'&gt;, value = local\n\nIn [11]: super_print(volume.options)\ntype = &lt;class 'NoneType'&gt;, value = None\n</code></pre>"},{"location":"objects/volumes/#methods","title":"Methods","text":""},{"location":"objects/volumes/#python_on_whales.Volume","title":"Volume","text":""},{"location":"objects/volumes/#python_on_whales.Volume.clone","title":"clone","text":"<pre><code>clone(new_volume_name=None, driver=None, labels={}, options={})\n</code></pre> <p>Creates a new volume and copy all the data inside.</p> <p>See the <code>docker.volume.clone</code> command for information about the arguments.</p>"},{"location":"objects/volumes/#python_on_whales.Volume.exists","title":"exists","text":"<pre><code>exists()\n</code></pre> <p>Returns <code>True</code> if the docker volume exists and <code>False</code> if it doesn't exists.</p> <p>If it doesn't exists, it most likely mean that it was removed.</p> <p>See the <code>docker.volume.exists</code> command for information about the arguments.</p>"},{"location":"objects/volumes/#python_on_whales.Volume.remove","title":"remove","text":"<pre><code>remove()\n</code></pre> <p>Removes this volume</p>"},{"location":"sub-commands/buildx/","title":"docker buildx","text":""},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI","title":"BuildxCLI","text":""},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.bake","title":"bake","text":"<pre><code>bake(targets=[], builder=None, files=[], load=False, cache=True, print=False, progress='auto', pull=False, push=False, set={}, variables={}, stream_logs=False, remote_definition=None)\n</code></pre> <p>Bake is similar to make, it allows you to build things declared in a file.</p> <p>For example it allows you to build multiple docker image in parallel.</p> <p>The CLI docs is here and it contains a lot more information.</p> PARAMETER DESCRIPTION <code>targets</code> <p>Targets or groups of targets to build.</p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>[]</code> </p> <code>builder</code> <p>The builder to use.</p> <p> TYPE: <code>Optional[ValidBuilder]</code> DEFAULT: <code>None</code> </p> <code>files</code> <p>Build definition file(s)</p> <p> TYPE: <code>Union[ValidPath, List[ValidPath]]</code> DEFAULT: <code>[]</code> </p> <code>load</code> <p>Shorthand for <code>set=[\"*.output=type=docker\"]</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>cache</code> <p>Whether to use the cache or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>print</code> <p>Do nothing, just returns the config.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>progress</code> <p>Set type of progress output (<code>\"auto\"</code>, <code>\"plain\"</code>, <code>\"tty\"</code>, or <code>False</code>). Use plain to keep the container output on screen</p> <p> TYPE: <code>Literal['auto', 'plain', 'tty', False]</code> DEFAULT: <code>'auto'</code> </p> <code>pull</code> <p>Always try to pull the newer version of the image</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>push</code> <p>Shorthand for <code>set=[\"*.output=type=registry\"]</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>set</code> <p>A list of overrides in the form <code>\"targetpattern.key=value\"</code>.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>variables</code> <p>A dict containing the values of the variables defined in the hcl file. See https://github.com/docker/buildx#hcl-variables-and-functions</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>remote_definition</code> <p>Remote context in which to find bake files</p> <p> TYPE: <code>Union[str, None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.bake--returns","title":"Returns","text":"<pre><code>The configuration used for the bake (files merged + override with\nthe arguments used in the function). It's the loaded json you would\nobtain by running `docker buildx bake --print --load my_target` if\nyour command was `docker buildx bake --load my_target`. Some example here.\n</code></pre> <pre><code>from python_on_whales import docker\n\n# returns the config used and runs the builds\nconfig = docker.buildx.bake([\"my_target1\", \"my_target2\"], load=True)\nassert config == {\n    \"target\": {\n        \"my_target1\": {\n            \"context\": \"./\",\n            \"dockerfile\": \"Dockerfile\",\n            \"tags\": [\"pretty_image1:1.0.0\"],\n            \"target\": \"out1\",\n            \"output\": [\"type=docker\"]\n        },\n        \"my_target2\": {\n            \"context\": \"./\",\n            \"dockerfile\": \"Dockerfile\",\n            \"tags\": [\"pretty_image2:1.0.0\"],\n            \"target\": \"out2\",\n            \"output\": [\"type=docker\"]\n        }\n    }\n}\n\n# returns the config only, doesn't run the builds\nconfig = docker.buildx.bake([\"my_target1\", \"my_target2\"], load=True, print=True)\n</code></pre>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.build","title":"build","text":"<pre><code>build(context_path, add_hosts={}, allow=[], attest=None, build_args={}, build_contexts={}, builder=None, cache=True, cache_from=None, cache_to=None, file=None, labels={}, load=False, metadata_file=None, network=None, output={}, platforms=None, progress='auto', provenance=None, pull=False, push=False, sbom=None, secrets=[], ssh=None, tags=[], target=None, stream_logs=False)\n</code></pre> <p>Build a Docker image with builkit as backend.</p> <p>Alias: <code>docker.build(...)</code></p> <p>A <code>python_on_whales.Image</code> is returned, even when using multiple tags. That is because it will produce a single image with multiple tags. If no image is loaded into the Docker daemon (if <code>push=True</code> for ex), then <code>None</code> is returned.</p> PARAMETER DESCRIPTION <code>context_path</code> <p>The path of the build context.</p> <p> TYPE: <code>ValidPath</code> </p> <code>add_hosts</code> <p>Hosts to add. <code>add_hosts={\"my_host1\": \"192.168.32.35\"}</code></p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>allow</code> <p>List of extra privileges. Eg <code>allow=[\"network.host\", \"security.insecure\"]</code></p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>attest</code> <p>Attestation parameters. Eg <code>attest={\"type\": \"sbom\", \"generator\": \"my_image\"}</code></p> <p> TYPE: <code>Optional[Dict[str, str]]</code> DEFAULT: <code>None</code> </p> <code>build_args</code> <p>The build arguments. ex <code>build_args={\"PY_VERSION\": \"3.7.8\", \"UBUNTU_VERSION\": \"20.04\"}</code>.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>build_contexts</code> <p>Additional build contexts. <code>build_contexts={[name]: [value], ...}</code> Supports local directories, git repositories, HTTP URL to a tarball, a docker image defined with a <code>docker-image://</code> prefix, and the <code>oci-layout://</code> protocol. ex <code>build_contexts={\"project2\": \"../path/to/project2/src\", \"qumu-src\": \"https://github.com/qemu/qemu.git\"}</code>.</p> <p> TYPE: <code>Dict[str, Union[str, ValidPath]]</code> DEFAULT: <code>{}</code> </p> <code>builder</code> <p>Specify which builder to use.</p> <p> TYPE: <code>Optional[ValidBuilder]</code> DEFAULT: <code>None</code> </p> <code>cache</code> <p>Whether or not to use the cache</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>cache_from</code> <p>Works only with the container driver. Loads the cache (if needed) from a registry <code>cache_from=\"user/app:cache\"</code>  or a directory on the client <code>cache_from=\"type=local,src=path/to/dir\"</code>. It's also possible to use a dict or list of dict form for this argument. e.g. <code>cache_from=dict(type=\"local\", src=\"path/to/dir\")</code></p> <p> TYPE: <code>Union[str, Dict[str, str], List[Dict[str, str]], None]</code> DEFAULT: <code>None</code> </p> <code>cache_to</code> <p>Works only with the container driver. Sends the resulting docker cache either to a registry <code>cache_to=\"user/app:cache\"</code>, or to a local directory <code>cache_to=\"type=local,dest=path/to/dir\"</code>. It's also possible to use a dict form for this argument. e.g. <code>cache_to=dict(type=\"local\", dest=\"path/to/dir\", mode=\"max\")</code></p> <p> TYPE: <code>Union[str, Dict[str, str], None]</code> DEFAULT: <code>None</code> </p> <code>file</code> <p>The path of the Dockerfile</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Dict of labels to add to the image. <code>labels={\"very-secure\": \"1\", \"needs-gpu\": \"0\"}</code> for example.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>load</code> <p>Shortcut for <code>output=dict(type=\"docker\")</code> If <code>True</code>, <code>docker.buildx.build</code> will return a <code>python_on_whales.Image</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>network</code> <p>which network to use when building the Docker image</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>output</code> <p>Output destination (format: <code>output={\"type\": \"local\", \"dest\": \"path\"}</code> Possible output types are <code>[\"local\", \"tar\", \"oci\", \"docker\", \"image\", \"registry\"]</code>. See this link for more details about each exporter.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>platforms</code> <p>List of target platforms when building the image. Ex: <code>platforms=[\"linux/amd64\", \"linux/arm64\"]</code></p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>progress</code> <p>Set type of progress output (auto, plain, tty, or False). Use plain to keep the container output on screen</p> <p> TYPE: <code>Literal['auto', 'plain', 'tty', False]</code> DEFAULT: <code>'auto'</code> </p> <code>provenance</code> <p>Shortand for <code>attest={\"type\": \"provenance\"}</code>. Eg <code>provenance=True</code> or <code>provenance=dict(mode=\"max\")</code>. <code>provenance=False</code> might be needed if you are having the issue Default image output from buildx v0.10 cannot run on Google Cloud Run or AWS Lambda</p> <p> TYPE: <code>Union[bool, Dict[str, str], None]</code> DEFAULT: <code>None</code> </p> <code>pull</code> <p>Always attempt to pull a newer version of the image</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>push</code> <p>Shorthand for <code>output=dict(type=\"registry\")</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sbom</code> <p>Shorthand for <code>attest={\"type\": \"sbom\"}</code>. Eg <code>sbom=True</code>.</p> <p> TYPE: <code>Union[bool, Dict[str, str], None]</code> DEFAULT: <code>None</code> </p> <code>secrets</code> <p>One or more secrets passed as string(s). For example <code>secrets=\"id=aws,src=/home/my_user/.aws/credentials\"</code></p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>[]</code> </p> <code>ssh</code> <p>SSH agent socket or keys to expose to the build (format is <code>default|&lt;id&gt;[=&lt;socket&gt;|&lt;key&gt;[,&lt;key&gt;]]</code> as a string)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>tags</code> <p>Tag or tags to put on the resulting image.</p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>[]</code> </p> <code>target</code> <p>Set the target build stage to build.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>stream_logs</code> <p>If <code>True</code> this function will return an iterator of strings. You can then read the logs as they arrive.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>metadata_file</code> <p>Path where build metadata should be written. Equivalent to the CLI flag <code>--metadata-file</code> and only used when provided.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.build--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Image` if a Docker image is loaded\nin the daemon after the build (the default behavior when\ncalling `docker.build(...)`). Otherwise, `None`.\n</code></pre>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.create","title":"create","text":"<pre><code>create(context_or_endpoint=None, bootstrap=False, buildkitd_flags=None, config=None, platforms=None, driver=None, driver_options={}, name=None, use=False, append=False)\n</code></pre> <p>Create a new builder instance</p> PARAMETER DESCRIPTION <code>context_or_endpoint</code> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>bootstrap</code> <p>Boot builder after creation</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>buildkitd_flags</code> <p>Flags for buildkitd daemon</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>BuildKit config file</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>platforms</code> <p>Comma-separated list of platforms of the form OS/architecture/variant. Ex: <code>platforms=[\"linux/amd64\", \"linux/arm64\"]</code></p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>driver</code> <p>Driver to use (available: [kubernetes docker docker-container])</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>driver_options</code> <p>Options for the driver. e.g <code>driver_options=dict(network=\"host\")</code></p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>name</code> <p>Builder instance name</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>use</code> <p>Set the current builder instance to this builder</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>append</code> <p>Append a node to the current builder instance, in this case <code>name</code> must be provided.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Builder` object.\n</code></pre>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.disk_usage","title":"disk_usage","text":"<pre><code>disk_usage()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.inspect","title":"inspect","text":"<pre><code>inspect(x=None, bootstrap=False)\n</code></pre> <p>Returns a builder instance from the name.</p> PARAMETER DESCRIPTION <code>x</code> <p>If <code>None</code> (the default), returns the current builder. If a string is provided, the builder that has this name is returned.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>bootstrap</code> <p>If set to True, ensure builder has booted before inspecting.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.inspect--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Builder` object.\n</code></pre>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.is_installed","title":"is_installed","text":"<pre><code>is_installed()\n</code></pre> <p>Returns <code>True</code> if docker buildx is installed and working.</p> <p>If it's not installed, head to the installation page and follow the instructions.</p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>Returns the list of <code>python_on_whales.Builder</code> available.</p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.prune","title":"prune","text":"<pre><code>prune(all=False, filters={}, stream_logs=False)\n</code></pre> <p>Remove build cache on the current builder.</p> PARAMETER DESCRIPTION <code>all</code> <p>Remove all cache, not just dangling layers</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filters</code> <p>Filters to use, for example <code>filters=dict(until=\"24h\")</code></p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>stream_logs</code> <p>If <code>True</code> this function will return an iterator of strings. You can then read the logs as they arrive. If <code>False</code> (the default value), then the function returns <code>None</code>, but when it returns, then the prune operation has already been done.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.remove","title":"remove","text":"<pre><code>remove(builder)\n</code></pre> <p>Remove a builder</p> PARAMETER DESCRIPTION <code>builder</code> <p>The builder to remove</p> <p> TYPE: <code>Union[Builder, str]</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.stop","title":"stop","text":"<pre><code>stop(builder)\n</code></pre> <p>Stop the builder instance</p> PARAMETER DESCRIPTION <code>builder</code> <p>The builder to stop. If <code>None</code> (the default value), the current builder is stopped.</p> <p> TYPE: <code>Optional[ValidBuilder]</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.use","title":"use","text":"<pre><code>use(builder, default=False, global_=False)\n</code></pre> <p>Set the current builder instance</p> PARAMETER DESCRIPTION <code>builder</code> <p>The builder to use</p> <p> TYPE: <code>Union[Builder, str]</code> </p> <code>default</code> <p>Set builder as default for the current context</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>global_</code> <p>Builder will be used even when changing contexts</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.cli_wrapper.BuildxCLI.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Returns the docker buildx version as a string.</p> <pre><code>from python_on_whales import docker\n\nversion = docker.buildx.version()\nprint(version)\n# \"github.com/docker/buildx v0.4.2 fb7b670b764764dc4716df3eba07ffdae4cc47b2\"\n</code></pre>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.imagetools.cli_wrapper.ImagetoolsCLI","title":"ImagetoolsCLI","text":""},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.imagetools.cli_wrapper.ImagetoolsCLI.create","title":"create","text":"<pre><code>create(sources=[], tags=[], append=False, files=[], dry_run=False, builder=None)\n</code></pre> <p>Create a new manifest list based on source manifests. The source manifests can be manifest lists or single platform distribution manifests and must already exist in the registry where the new manifest is created. If only one source is specified, create performs a carbon copy.</p> <p>The CLI docs is here and it contains a lot more information.</p> PARAMETER DESCRIPTION <code>sources</code> <p>The sources manifest to create, change</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>append</code> <p>Append to existing manifest</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>dry_run</code> <p>Show final image instead of pushing</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>files</code> <p>Read source descriptor from file</p> <p> TYPE: <code>List[Union[str, Path]]</code> DEFAULT: <code>[]</code> </p> <code>builder</code> <p>The builder to use.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/buildx/#python_on_whales.components.buildx.imagetools.cli_wrapper.ImagetoolsCLI.inspect","title":"inspect","text":"<pre><code>inspect(name)\n</code></pre> <p>Returns the manifest of a Docker image in a registry without pulling it</p>"},{"location":"sub-commands/buildx/#notes-about-the-transition-between-the-legacy-builder-and-buildx","title":"Notes about the transition between the legacy builder and buildx","text":"<p>Users are encouraged to use buildx in Python-on-whales through the <code>docker.build()</code> function.</p> <p>Buildx is the next gen Docker builder and a transition is underway to make the <code>docker build</code> shell command use buildx. Python-on-whales has had an opinionated answer on the matter as <code>docker.build()</code> will always use buildx. This is because Python-on-whales was created  during the transition and doesn't have an existing user codebase to support.</p> <p>The legacy builder is still available by calling <code>docker.legacy_build()</code>, but note that</p> <ul> <li>It won't work if you use Docker 22.06 or above </li> <li>It won't work if you used <code>docker.buildx.install()</code> or <code>docker buildx install</code> previously </li> <li>It won't work if you had set the environment variable <code>DOCKER_BUILDKIT</code> to <code>1</code></li> </ul> <p>Some resources on the matter:</p> <ul> <li>Discussion about supporting the legacy builder in Python-on-whales</li> <li>Proposal: make BuildKit the default builder on Linux</li> <li>Deprecated Engine Features: Legacy builder for Linux images</li> </ul>"},{"location":"sub-commands/compose/","title":"docker compose","text":""},{"location":"sub-commands/compose/#some-notes-about-the-compose-functions","title":"Some notes about the compose functions","text":"<p>Behind the scenes,  the Go implementation of Docker compose is called a.k.a. Compose v2, not the Python implementation.</p> <p>You can verify that <code>docker compose</code> is installed by running <pre><code>docker compose --help\n</code></pre> Be careful! it's different from <code>docker-compose --help</code>! Notice the <code>-</code> between 'docker' and 'compose'. Compose v2 has no <code>-</code> in the command.</p> <p>If that doesn't work, then install the cli plugin. it's just a single binary to download.</p> <p>The Go implementation of compose is still experimental, so take the appropriate precautions.</p> <p>If you don't need to set any project-wide options, like the project name or  the compose file path, you can just import <code>docker</code> and start working.</p> <pre><code>from python_on_whales import docker\n\ndocker.compose.build()\ndocker.compose.up()\n...\ndocker.compose.down()\n</code></pre> <p>Otherwise, you have to define your project-wide options only once, when creating the Docker client.</p> <pre><code>from python_on_whales import DockerClient\n\ndocker = DockerClient(compose_files=[\"./my-compose-file.yml\"])\n\ndocker.compose.build()\ndocker.compose.up()\n...\ndocker.compose.down()\n</code></pre> <p>You have multiple compose options available (like profiles, env_files, project name) when creating the Docker client. You can check them out  in the <code>DockerClient</code> documentation.</p>"},{"location":"sub-commands/compose/#about-dockercomposeimages","title":"About <code>docker.compose.images()</code>.","text":"<p>The Docker command line has a <code>docker compose images</code> command. Python-on-whales doesn't have an equivalent because it's trivial to do so with existing functions.</p> <pre><code>images = [docker.image.inspect(container.image) for container in docker.compose.ps()]\n</code></pre> <ul> <li><code>docker.compose.ps()</code> returns the list of all containers in the compose stack.</li> <li><code>container.image</code> gives you the id of the Docker image of the container as a <code>str</code>.</li> <li><code>docker.image.inspect()</code> gives you a <code>python_on_whales.Image</code> from a <code>str</code>.</li> </ul>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI","title":"ComposeCLI","text":""},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.build","title":"build","text":"<pre><code>build(services=None, build_args={}, cache=True, progress=None, pull=False, quiet=False, ssh=None, stream_logs=False)\n</code></pre> <p>Build services declared in a yaml compose file.</p> PARAMETER DESCRIPTION <code>services</code> <p>The services to build (as list of strings). If <code>None</code> (default), all services are built. An empty list means that nothing will be built.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>build_args</code> <p>Set build-time variables for services. For example  <code>build_args={\"PY_VERSION\": \"3.7.8\", \"UBUNTU_VERSION\": \"20.04\"}</code>.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>cache</code> <p>Set to <code>False</code> if you don't want to use the cache to build your images</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>progress</code> <p>Set type of progress output (auto, tty, plain, quiet) (default \"auto\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pull</code> <p>Set to <code>True</code> to always attempt to pull a newer version of the image (in the <code>FROM</code> statements for example).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>quiet</code> <p>Don't print anything</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ssh</code> <p>Set SSH authentications used when building service images. (use <code>'default'</code> for using your default SSH Agent)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.config","title":"config","text":"<pre><code>config(return_json=False)\n</code></pre> <p>Returns the configuration of the compose stack for further inspection.</p> <p>For example <pre><code>from python_on_whales import docker\nproject_config = docker.compose.config()\nprint(project_config.services[\"my_first_service\"].image)\n\"redis\"\n</code></pre></p> PARAMETER DESCRIPTION <code>return_json</code> <p>If <code>False</code>, a <code>ComposeConfig</code> object will be returned, and you 'll be able to take advantage of your IDE autocompletion. If you want the full json output, you may use <code>return_json</code>. In this case, you'll get lists and dicts corresponding to the json response, unmodified. It may be useful if you just want to print the config or want to access a field that was not in the <code>ComposeConfig</code> class.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.config--returns","title":"Returns","text":"<pre><code>A `ComposeConfig` object if `return_json` is `False`, and a `dict` otherwise.\n</code></pre>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.create","title":"create","text":"<pre><code>create(services=None, build=False, force_recreate=False, no_build=False, no_recreate=False, stream_logs=False)\n</code></pre> <p>Creates containers for a service.</p> PARAMETER DESCRIPTION <code>services</code> <p>The name of the services for which the containers will be created. The default <code>None</code> means that the containers for all services will be created. A single string means we will create the container for a single service. A list of string means we will create the containers for each service in the list. An empty list means nothing will be created, the function call is then a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p> <code>build</code> <p>Build images before starting containers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force_recreate</code> <p>Recreate containers even if their configuration and image haven't changed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_build</code> <p>Don't build an image, even if it's missing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_recreate</code> <p>If containers already exist, don't recreate them. Incompatible with <code>force_recreate=True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.down","title":"down","text":"<pre><code>down(services=None, remove_orphans=False, remove_images=None, timeout=None, volumes=False, quiet=False, stream_logs=False)\n</code></pre> <p>Stops and removes the containers</p> PARAMETER DESCRIPTION <code>services</code> <p>The services to stop. If <code>None</code> (default), all services are stopped. If an empty list is provided, the function call does nothing, it's a no-op.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>remove_orphans</code> <p>Remove containers for services not defined in the Compose file.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>remove_images</code> <p>Remove images used by services. <code>\"local\"</code> remove only images that don't have a custom tag. Possible values are <code>\"local\"</code> and <code>\"all\"</code>.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>Specify a shutdown timeout in seconds (default 10).</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>volumes</code> <p>Remove named volumes declared in the volumes section of the Compose file and anonymous volumes attached to containers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>quiet</code> <p>If <code>False</code>, send to stderr and stdout the progress spinners with the messages. If <code>True</code>, do not display anything.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.events","title":"events","text":"<pre><code>events(services=[])\n</code></pre> <p>Return Docker Compose events for the specified services.</p> <p>This function streams events related to the specified services in real-time. If no services are specified, it streams events for all services in the current Compose project.</p> <p>Example usage: <pre><code>from python_on_whales import docker\n\n# Stream events for a specific service\nfor event in docker.compose.events([\"my_service\"]):\n    print(event)\n    # This will keep streaming events indefinitely.\n    # Use 'break' to exit the loop if needed.\n\n# Stream events for all services in the Compose project\nfor event in docker.compose.events():\n    print(event)\n</code></pre></p> PARAMETER DESCRIPTION <code>services</code> <p>A list of service names to filter events. If empty, events for all services are streamed.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> RETURNS DESCRIPTION <code>Iterator[ComposeEvent]</code> <p>An iterator that yields <code>ComposeEvent</code> objects representing the events.</p> Note <p>This function streams events indefinitely unless interrupted. Use it carefully in long-running processes.</p> <p>reference page for docker events</p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.execute","title":"execute","text":"<pre><code>execute(service, command, detach=False, envs={}, index=1, tty=True, privileged=False, user=None, workdir=None)\n</code></pre> <p>Execute a command in a running container.</p> PARAMETER DESCRIPTION <code>service</code> <p>The name of the service.</p> <p> TYPE: <code>str</code> </p> <code>command</code> <p>The command to execute.</p> <p> TYPE: <code>List[str]</code> </p> <code>detach</code> <p>If <code>True</code>, detach from the container after the command exits. In this case,  nothing is returned by the function. By default, the execute command returns only when the  command has finished running, and the function will raise an exception <code>DockerException</code> if the command  exits with a non-zero exit code. If <code>False</code>, the command is executed and the stdout is returned.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>envs</code> <p>A dictionary of environment variables to set in the container.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>index</code> <p>The index of the container to execute the command in (default 1) if there are multiple containers for this service.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>tty</code> <p>If <code>True</code>, allocate a pseudo-TTY. Use <code>False</code> to get the output of the command.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>privileged</code> <p>If <code>True</code>, run the command in privileged mode.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user</code> <p>The username to use inside the container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>workdir</code> <p>The working directory inside the container.</p> <p> TYPE: <code>Union[str, Path, None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.is_installed","title":"is_installed","text":"<pre><code>is_installed()\n</code></pre> <p>Returns <code>True</code> if docker compose (the one written in Go) is installed and working.</p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.kill","title":"kill","text":"<pre><code>kill(services=None, signal=None)\n</code></pre> <p>Kills the container(s) of a service</p> PARAMETER DESCRIPTION <code>services</code> <p>One or more service(s) to kill. The default (<code>None</code>) is to kill all services. A string means the call will kill one single service. A list of service names can be provided to kill multiple services in one function call. An empty list means that no services are going to be killed, the function is then a no-op.</p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>None</code> </p> <code>signal</code> <p>the signal to send to the container. Default is <code>\"SIGKILL\"</code></p> <p> TYPE: <code>Optional[Union[int, str]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.logs","title":"logs","text":"<pre><code>logs(services=[], tail=None, follow=False, no_log_prefix=False, timestamps=False, since=None, until=None, stream=False)\n</code></pre> <p>View output from containers</p> PARAMETER DESCRIPTION <code>services</code> <p>One or more service(s) to view</p> <p> TYPE: <code>Union[str, List[str]]</code> DEFAULT: <code>[]</code> </p> <code>tail</code> <p>Number of lines to show from the end of the logs for each container. (default \"all\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>follow</code> <p>Follow log output WARNING: With this option, <code>docker.compose.logs()</code> will not return at all. Use it exclusively with <code>stream=True</code>. You can loop on the logs but the loop will never end.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_log_prefix</code> <p>Don't print prefix in logs</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>timestamps</code> <p>Show timestamps</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>since</code> <p>Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>until</code> <p>Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>stream</code> <p>Similar to the <code>stream</code> argument of <code>docker.run()</code>. This function will then return and iterator that will yield a tuple <code>(source, content)</code> with <code>source</code> being <code>\"stderr\"</code> or <code>\"stdout\"</code>. <code>content</code> is the content of the line as bytes. Take a look at the user guide to have an example of the output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.logs--returns","title":"Returns","text":"<pre><code>`str` if `stream=False` (the default), `Iterable[Tuple[str, bytes]]`\nif `stream=True`.\n</code></pre>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.ls","title":"ls","text":"<pre><code>ls(all=False, filters={})\n</code></pre> <p>Returns a list of docker compose projects</p> PARAMETER DESCRIPTION <code>all</code> <p>Results include all stopped compose projects.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filters</code> <p>Filter results based on conditions provided.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.ls--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.ComposeProject]`\n</code></pre>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.pause","title":"pause","text":"<pre><code>pause(services=None)\n</code></pre> <p>Pause one or more services</p> PARAMETER DESCRIPTION <code>services</code> <p><code>None</code> (the default) means pause all containers of all compose services. A string means that the call will pause the container of a specific service. A list of string means the call will pause the containers of all the services specified. So if an empty list is provided, then this function call is a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.port","title":"port","text":"<pre><code>port(service, private_port, index=1, protocol='tcp')\n</code></pre> <p>Returns the public port for a port binding.</p> PARAMETER DESCRIPTION <code>service</code> <p>The name of the service.</p> <p> TYPE: <code>str</code> </p> <code>private_port</code> <p>The private port.</p> <p> TYPE: <code>Union[str, int]</code> </p> <code>index</code> <p>Index of the container if service has multiple replicas (default 1)</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>protocol</code> <p>tcp or udp (default \"tcp\").</p> <p> TYPE: <code>str</code> DEFAULT: <code>'tcp'</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.port--returns","title":"Returns","text":"<pre><code>tuple with (host, port). If port is unknown, then host and port are None.\n</code></pre>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.ps","title":"ps","text":"<pre><code>ps(services=None, all=False)\n</code></pre> <p>Returns the containers that were created by the current project.</p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.ps--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Container]`\n</code></pre>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.pull","title":"pull","text":"<pre><code>pull(services=None, ignore_pull_failures=False, include_deps=False, quiet=False, stream_logs=False)\n</code></pre> <p>Pull service images</p> PARAMETER DESCRIPTION <code>services</code> <p>The list of services to select. Only the images of those services will be pulled. If no services are specified (<code>None</code>) (the default behavior) all images of all services are pulled. If an empty list is provided, then the function call is a no-op.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>ignore_pull_failures</code> <p>Pull what it can and ignores images with pull failures</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>include_deps</code> <p>Also pull services declared as dependencies</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>quiet</code> <p>By default, the progress bars are printed in stdout and stderr (both). To disable all output, use <code>quiet=True</code></p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.push","title":"push","text":"<pre><code>push(services=None)\n</code></pre> <p>Push service images</p> PARAMETER DESCRIPTION <code>services</code> <p>The list of services to select. Only the images of those services will be pushed. If no services are specified (<code>None</code>, the default behavior) all images of all services are pushed. If an empty list is provided, then the function call is a no-op.</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.restart","title":"restart","text":"<pre><code>restart(services=None, timeout=None)\n</code></pre> <p>Restart containers</p> PARAMETER DESCRIPTION <code>services</code> <p>The names of one or more services to restart (str or list of str). If the argument is not specified, <code>services</code> is <code>None</code> and all services are restarted. If <code>services</code> is an empty list, then the function call is a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The shutdown timeout (<code>int</code> are interpreted as seconds). <code>None</code> means the CLI default value (10s). See the docker stop docs for more details about this argument.</p> <p> TYPE: <code>Union[int, timedelta, None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.rm","title":"rm","text":"<pre><code>rm(services=None, stop=False, volumes=False)\n</code></pre> <p>Removes stopped service containers</p> <p>By default, anonymous volumes attached to containers will not be removed. You can override this with <code>volumes=True</code>.</p> <p>Any data which is not in a volume will be lost.</p> PARAMETER DESCRIPTION <code>services</code> <p>The names of one or more services to remove (str or list of str). If <code>None</code> (the default) then all services are removed. If an empty list is provided, this function call is a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p> <code>stop</code> <p>Stop the containers, if required, before removing</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>volumes</code> <p>Remove any anonymous volumes attached to containers</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.run","title":"run","text":"<pre><code>run(service, command=[], build=False, detach=False, entrypoint=None, envs={}, labels={}, name=None, tty=True, stream=False, dependencies=True, publish=[], remove=False, service_ports=False, use_aliases=False, user=None, volumes=(), workdir=None)\n</code></pre> <p>Run a one-off command on a service.</p> PARAMETER DESCRIPTION <code>service</code> <p>The name of the service.</p> <p> TYPE: <code>str</code> </p> <code>command</code> <p>The command to execute.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>detach</code> <p>if <code>True</code>, returns immediately with the Container.     If <code>False</code>, returns the command stdout as string.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>entrypoint</code> <p>The entrypoint to execute.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>envs</code> <p>A dictionary of environment variables to set in the container.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>labels</code> <p>Add or override labels</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>name</code> <p>Assign a name to the container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>dependencies</code> <p>Also start linked services.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>publish</code> <p>Publish a container's port(s) to the host.</p> <p> TYPE: <code>List[ValidPortMapping]</code> DEFAULT: <code>[]</code> </p> <code>service_ports</code> <p>Enable service's ports and map them to the host.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>remove</code> <p>Automatically remove the container when it exits.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>use_aliases</code> <p>Use the service's network aliases in the connected network(s).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tty</code> <p>Allocate a pseudo-TTY. Allow the process to access your terminal to write on it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>stream</code> <p>Similar to <code>docker.run(..., stream=True)</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user</code> <p>Username or UID, format: <code>\"&lt;name|uid&gt;[:&lt;group|gid&gt;]\"</code></p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>volumes</code> <p>Bind mount a volume. Some examples: <code>[(\"/\", \"/host\"), (\"/etc/hosts\", \"/etc/hosts\", \"rw\")]</code>.</p> <p> TYPE: <code>Iterable[VolumeDefinition]</code> DEFAULT: <code>()</code> </p> <code>workdir</code> <p>Working directory inside the container</p> <p> TYPE: <code>Union[None, str, Path]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Union[str, Container, Iterable[Tuple[str, bytes]]]</code> <p>Optional[str]</p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.start","title":"start","text":"<pre><code>start(services=None, stream_logs=False)\n</code></pre> <p>Start the specified services.</p> PARAMETER DESCRIPTION <code>services</code> <p>The names of one or more services to start. If <code>None</code> (the default), it means all services will start. If an empty list is provided, this function call is a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.stop","title":"stop","text":"<pre><code>stop(services=None, timeout=None, stream_logs=False)\n</code></pre> <p>Stop services</p> PARAMETER DESCRIPTION <code>services</code> <p>The names of one or more services to stop (str or list of str). If <code>None</code> (the default), it means all services will stop. If an empty list is provided, this function call is a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>Number of seconds or timedelta (will be converted to seconds). Specify a shutdown timeout. Default is 10s.</p> <p> TYPE: <code>Union[int, timedelta, None]</code> DEFAULT: <code>None</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.top","title":"top","text":"<pre><code>top()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.unpause","title":"unpause","text":"<pre><code>unpause(services=None)\n</code></pre> <p>Unpause one or more services</p> PARAMETER DESCRIPTION <code>services</code> <p>One or more service to unpause. If <code>None</code> (the default), all services are unpaused. If services is an empty list, the function call does nothing, it's a no-op.</p> <p> TYPE: <code>Union[str, List[str], None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.up","title":"up","text":"<pre><code>up(services=None, build=False, detach=False, abort_on_container_exit=False, scales={}, attach_dependencies=False, force_recreate=False, recreate=True, no_build=False, remove_orphans=False, renew_anon_volumes=False, color=True, log_prefix=True, start=True, quiet=False, wait=False, no_attach_services=None, pull=None, stream_logs=False, wait_timeout=None)\n</code></pre> <p>Start the containers.</p> <p>Reading the logs of the containers is not yet implemented.</p> PARAMETER DESCRIPTION <code>services</code> <p>The services to start. If <code>None</code> (default), all services are started. If an empty list is provided, the function call does nothing, it's a no-op.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>build</code> <p>If <code>True</code>, build the docker images before starting the containers even if a docker image with this name already exists. If <code>False</code> (the default), build only the docker images that do not already exist.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>detach</code> <p>If <code>True</code>, run the containers in the background. If <code>False</code> this function returns only when all containers have stopped. Incompatible with <code>abort_on_container_exit=True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>abort_on_container_exit</code> <p>If <code>True</code> stops all containers if any container was stopped. Incompatible with <code>detach=True</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>scales</code> <p>Scale SERVICE to NUM instances. Overrides the scale setting in the Compose file if present. For example: <code>scales={\"my_service\": 2, \"my_other_service\": 5}</code>.</p> <p> TYPE: <code>Dict[str, int]</code> DEFAULT: <code>{}</code> </p> <code>attach_dependencies</code> <p>Attach to dependent containers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force_recreate</code> <p>Recreate containers even if their configuration and image haven't changed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>recreate</code> <p>Recreate the containers if already exist. <code>recreate=False</code> and <code>force_recreate=True</code> are incompatible.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>no_build</code> <p>Don't build an image, even if it's missing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>remove_orphans</code> <p>Remove containers for services not defined in the Compose file.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>renew_anon_volumes</code> <p>Recreate anonymous volumes instead of retrieving data from the previous containers.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>If <code>False</code>, it will produce monochrome output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>log_prefix</code> <p>If <code>False</code>, will not display the prefix in the logs.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>start</code> <p>Start the service after creating them.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>quiet</code> <p>By default, some progress bars and logs are sent to stderr and stdout. Set <code>quiet=True</code> to avoid having any output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>wait</code> <p>Wait for services to be running|healthy. Implies detached mode.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>no_attach_services</code> <p>The services not to attach to.</p> <p> TYPE: <code>Union[List[str], str, None]</code> DEFAULT: <code>None</code> </p> <code>pull</code> <p>Pull image before running (\u201calways\u201d|\u201dmissing\u201d|\u201dnever\u201d).</p> <p> TYPE: <code>Literal['always', 'missing', 'never', None]</code> DEFAULT: <code>None</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an Iterable of <code>Tuple[str, bytes]</code> where the first element is the type of log (<code>\"stdin\"</code> or <code>\"stdout\"</code>). The second element is the log itself, as bytes, you'll need to call <code>.decode()</code> if you want the logs as <code>str</code>. See the streaming guide if you are not familiar with the streaming of logs in Python-on-whales.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>wait_timeout</code> <p>Maximum duration to wait for the project to be running|healthy</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/compose/#python_on_whales.components.compose.cli_wrapper.ComposeCLI.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Returns the version of docker compose as a <code>str</code>.</p>"},{"location":"sub-commands/config/","title":"docker config","text":""},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI","title":"ConfigCLI","text":""},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.create","title":"create","text":"<pre><code>create(name, file, labels={}, template_driver=None)\n</code></pre> <p>Create a config from a file</p> <p>See the docker docs for more information about swarm configs.</p> PARAMETER DESCRIPTION <code>name</code> <p>The config name.</p> <p> TYPE: <code>str</code> </p> <code>file</code> <p>Tbe file to be used as config.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>labels</code> <p>The labels to add to the config</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>template_driver</code> <p>The template driver</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Config` object.\n</code></pre>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a <code>python_on_whales.Config</code> object based on its name or id.</p>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.inspect--argument","title":"Argument","text":"<pre><code>x: An id or name or a list of ids/names.\n</code></pre>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.inspect--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Config` if a string was passed as argument. A\n`List[python_on_whales.Config]` if a list of strings was passed as argument.\n</code></pre>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.list","title":"list","text":"<pre><code>list(filters={})\n</code></pre> <p>List all config available in the swarm.</p> PARAMETER DESCRIPTION <code>filters</code> <p>If you want to filter the results based on a given condition. For example, <code>docker.config.list(filters=dict(label=\"my_label=hello\"))</code>.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Config]`.\n</code></pre>"},{"location":"sub-commands/config/#python_on_whales.components.config.cli_wrapper.ConfigCLI.remove","title":"remove","text":"<pre><code>remove(x)\n</code></pre> <p>Remove one or more configs.</p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of configs. Valid values are the id of the config or a <code>python_on_whales.Config</code> object. An empty list means the function call does nothing.</p> <p> TYPE: <code>Union[ValidConfig, List[ValidConfig]]</code> </p>"},{"location":"sub-commands/container/","title":"docker container","text":""},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI","title":"ContainerCLI","text":""},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.attach","title":"attach","text":"<pre><code>attach(container, detach_keys=None, stdin=True, sig_proxy=True)\n</code></pre> <p>Attach local standard input, output, and error streams to a running container</p> <p>Alias: <code>docker.attach(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The running container to attach to</p> <p> TYPE: <code>ValidContainer</code> </p> <code>detach_keys</code> <p>Override the key sequence for detaching a container</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>stdin</code> <p>Attach STDIN</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>sig_proxy</code> <p>Proxy all received signals to the process (default true)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.attach--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.commit","title":"commit","text":"<pre><code>commit(container, tag=None, author=None, message=None, pause=True)\n</code></pre> <p>Create a new image from a container's changes</p> PARAMETER DESCRIPTION <code>container</code> <p>The container to create the image from</p> <p> TYPE: <code>ValidContainer</code> </p> <code>tag</code> <p>tag to apply on the image produced</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>author</code> <p>Author (e.g., \"John Hannibal Smith hannibal@a-team.com\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>message</code> <p>Commit message</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pause</code> <p>Pause container during commit</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.copy","title":"copy","text":"<pre><code>copy(source, destination)\n</code></pre> <p>Copy files/folders between a container and the local filesystem</p> <p>Alias: <code>docker.copy(...)</code></p> <pre><code>from python_on_whales import docker\n\ndocker.run(\"ubuntu\", [\"sleep\", \"infinity\"], name=\"dodo\", remove=True, detach=True)\n\ndocker.copy(\"/tmp/my_local_file.txt\", (\"dodo\", \"/path/in/container.txt\"))\ndocker.copy((\"dodo\", \"/path/in/container.txt\"), \"/tmp/my_local_file2.txt\")\n</code></pre> <p>Doesn't yet support sending or receiving iterators of Python bytes.</p> PARAMETER DESCRIPTION <code>source</code> <p>Local path or tuple. When using a tuple, the first element of the tuple is the container, the second element is the path in the container. ex: <code>source=(\"my-container\", \"/usr/bin/something\")</code>.</p> <p> TYPE: <code>Union[ValidPath, ContainerPath]</code> </p> <code>destination</code> <p>Local path or tuple. When using a tuple, the first element of the tuple is the container, the second element is the path in the container. ex: <code>source=(\"my-container\", \"/usr/bin/something\")</code>.</p> <p> TYPE: <code>Union[ValidPath, ContainerPath]</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.create","title":"create","text":"<pre><code>create(image, command=(), *, add_hosts=(), blkio_weight=None, blkio_weight_device=(), cap_add=(), cap_drop=(), cgroup_parent=None, cgroupns=None, cidfile=None, cpu_period=None, cpu_quota=None, cpu_rt_period=None, cpu_rt_runtime=None, cpu_shares=None, cpus=None, cpuset_cpus=None, cpuset_mems=None, detach=False, devices=(), device_cgroup_rules=(), device_read_bps=(), device_read_iops=(), device_write_bps=(), device_write_iops=(), content_trust=False, dns=(), dns_options=(), dns_search=(), domainname=None, entrypoint=None, envs={}, env_files=(), env_host=False, expose=(), gpus=None, groups_add=(), healthcheck=True, health_cmd=None, health_interval=None, health_retries=None, health_start_period=None, health_timeout=None, hostname=None, init=False, interactive=False, ip=None, ip6=None, ipc=None, isolation=None, kernel_memory=None, labels={}, label_files=(), link=(), link_local_ip=(), log_driver=None, log_options=(), mac_address=None, memory=None, memory_reservation=None, memory_swap=None, memory_swappiness=None, mounts=(), name=None, networks=(), network_aliases=(), oom_kill=True, oom_score_adj=None, pid=None, pids_limit=None, platform=None, pod=None, privileged=False, publish=(), publish_all=False, pull='missing', read_only=False, restart=None, remove=False, runtime=None, security_options=(), shm_size=None, sig_proxy=True, stop_signal=None, stop_timeout=None, storage_options=(), sysctl={}, systemd=None, tmpfs=(), tty=False, tz=None, ulimit=(), user=None, userns=None, uts=None, volumes=(), volume_driver=None, volumes_from=(), workdir=None)\n</code></pre> <p>Creates a container, but does not start it.</p> <p>Alias: <code>docker.create(...)</code></p> <p>Start it then with the <code>.start()</code> method.</p> <p>It might be useful if you want to delay the start of a container, to do some preparations beforehand. For example, it's common to do this workflow: <code>docker create</code> -&gt; <code>docker cp</code> -&gt; <code>docker start</code> to put files in the container before starting.</p> <p>There is no <code>detach</code> argument since it's a runtime option.</p> <p>The arguments are the same as <code>docker.run</code>.</p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.diff","title":"diff","text":"<pre><code>diff(container)\n</code></pre> <p>List all the files modified, added or deleted since the container started.</p> <p>Alias: <code>docker.diff(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The container to inspect</p> <p> TYPE: <code>ValidContainer</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.diff--returns","title":"Returns","text":"<pre><code>`Dict[str, str]` Something like\n`{\"/some_path\": \"A\", \"/some_file\": \"M\", \"/tmp\": \"D\"}` for example.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.execute","title":"execute","text":"<pre><code>execute(container, command, detach=False, envs={}, env_files=(), interactive=False, privileged=False, tty=False, user=None, workdir=None, stream=False, detach_keys=None, preserve_fds=None)\n</code></pre> <p>Execute a command inside a container</p> <p>Alias: <code>docker.execute(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The container to execute the command in.</p> <p> TYPE: <code>ValidContainer</code> </p> <code>command</code> <p>The command to execute.</p> <p> TYPE: <code>Sequence[str]</code> </p> <code>detach</code> <p>if <code>True</code>, returns immediately with <code>None</code>. If <code>False</code>, returns the command stdout as string.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>envs</code> <p>Set environment variables</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>env_files</code> <p>Read one or more files of environment variables</p> <p> TYPE: <code>Union[ValidPath, Iterable[ValidPath]]</code> DEFAULT: <code>()</code> </p> <code>interactive</code> <p>Leave stdin open during the duration of the process to allow communication with the parent process. Currently only works with <code>tty=True</code> for interactive use on the terminal.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>preserve_fds</code> <p>The number of additional file descriptors to pass through to the container. Only supported by podman.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>privileged</code> <p>Give extended privileges to the container.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tty</code> <p>Allocate a pseudo-TTY. Allow the process to access your terminal to write on it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>user</code> <p>Username or UID, format: <code>\"&lt;name|uid&gt;[:&lt;group|gid&gt;]\"</code></p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>workdir</code> <p>Working directory inside the container</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>stream</code> <p>Similar to <code>docker.run(..., stream=True)</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>detach_keys</code> <p>Override the key sequence for detaching a container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Union[None, str, Iterable[Tuple[str, bytes]]]</code> <p>Optional[str]</p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.execute--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.exists","title":"exists","text":"<pre><code>exists(x)\n</code></pre> <p>Returns <code>True</code> if the container exists. <code>False</code> otherwise.</p> <p>It's just calling <code>docker.container.inspect(...)</code> and verifies that it doesn't throw  a <code>python_on_whales.exceptions.NoSuchContainer</code>.</p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.exists--returns","title":"Returns","text":"<pre><code>A `bool`\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.export","title":"export","text":"<pre><code>export(container, output)\n</code></pre> <p>Export a container's filesystem as a tar archive</p> <p>Alias: <code>docker.export(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The container to export.</p> <p> TYPE: <code>ValidContainer</code> </p> <code>output</code> <p>The path of the output tar archive. Returning a generator of bytes is not yet implemented.</p> <p> TYPE: <code>ValidPath</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.export--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.init","title":"init","text":"<pre><code>init(containers)\n</code></pre> <p>Initialize one or more containers.</p> <p>Note that this is only supported by podman.</p> <p>Alias: <code>docker.init(...)</code></p> PARAMETER DESCRIPTION <code>containers</code> <p>One or more containers to kill</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>output</code> <p>The path of the output tar archive. Returning a generator of bytes is not yet implemented.</p> <p> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.init--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if any of the\ncontainers do not exist.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a container object from a name or ID.</p> PARAMETER DESCRIPTION <code>x</code> <p>A container name or ID, or a list of container names and/or IDs</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> RETURNS DESCRIPTION <code>Union[Container, List[Container]]</code> <p>A <code>python_on_whales.Container</code> object or a list of those</p> <code>Union[Container, List[Container]]</code> <p>if a list of IDs was passed as input.</p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.inspect--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.kill","title":"kill","text":"<pre><code>kill(containers, signal=None)\n</code></pre> <p>Kill one or more containers.</p> <p>Alias: <code>docker.kill(...)</code></p> PARAMETER DESCRIPTION <code>containers</code> <p>One or more containers to kill</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>signal</code> <p>The signal to send the container</p> <p> TYPE: <code>Optional[Union[int, str]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.kill--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if any of the\ncontainers do not exist.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.list","title":"list","text":"<pre><code>list(all=False, filters=())\n</code></pre> <p>List the containers on the host.</p> <p>Alias: <code>docker.ps(...)</code></p> PARAMETER DESCRIPTION <code>all</code> <p>If <code>True</code>, also returns containers that are not running.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filters</code> <p>Filters to apply when listing containers.</p> <p> TYPE: <code>Union[Iterable[ContainerListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Container]`\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.logs","title":"logs","text":"<pre><code>logs(container, *, details=False, since=None, tail=None, timestamps=False, until=None, follow=False, stream=False)\n</code></pre> <p>Returns the logs of a container as a string or an iterator.</p> <p>Alias: <code>docker.logs(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The container to get the logs of</p> <p> TYPE: <code>ValidContainer</code> </p> <code>details</code> <p>Show extra details provided to logs</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>since</code> <p>Use a datetime or timedelta to specify the lower date limit for the logs.</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>tail</code> <p>Number of lines to show from the end of the logs (default all)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>timestamps</code> <p>Put timestamps next to lines.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>until</code> <p>Use a datetime or a timedelta to specify the upper date limit for the logs.</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>follow</code> <p>If <code>False</code> (the default), the logs returned are the logs up to the time of the function call. If <code>True</code>, the logs of the container up to the time the container stopped are displayed. Which means that if the container isn't stopped yet, the function will continue until the container is stopped. Which is why it is advised to use the <code>stream</code> option if you use the <code>follow</code> option. Without <code>stream</code>, only a <code>str</code> will be returned, possibly much later in the future. With <code>stream</code>, you'll be able to read the logs in real time.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream</code> <p>Similar to the <code>stream</code> argument of <code>docker.run</code>. This function will then return an iterator that will yield a tuple <code>(source, content)</code> with <code>source</code> being <code>\"stderr\"</code> or <code>\"stdout\"</code>. <code>content</code> is the content of the line as bytes. Take a look at the user guide to have an example of the output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.logs--returns","title":"Returns","text":"<pre><code>`str` if `stream=False` (the default), `Iterable[Tuple[str, bytes]]`\nif `stream=True`.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.logs--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exist.\n</code></pre> <p>If you are a bit confused about <code>follow</code> and <code>stream</code>, here are some use cases.</p> <ul> <li>If you want to have the logs up to this point as a <code>str</code>, don't use those args.</li> <li>If you want to stream the output in real time, use <code>follow=True, stream=True</code></li> <li>If you want the logs up to this point, but you don't want to fit all the logs in memory because they are too big, use <code>stream=True</code>.</li> </ul>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.pause","title":"pause","text":"<pre><code>pause(containers)\n</code></pre> <p>Pauses one or more containers</p> <p>Alias: <code>docker.pause(...)</code></p> PARAMETER DESCRIPTION <code>containers</code> <p>One or more containers to pause</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.pause--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.prune","title":"prune","text":"<pre><code>prune(filters=(), stream_logs=False)\n</code></pre> <p>Remove containers that are not running.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Filters to apply when pruning.</p> <p> TYPE: <code>Union[Iterable[ContainerListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p> <code>stream_logs</code> <p>If <code>True</code> this function will return an iterator of strings. You can then read the logs as they arrive. If <code>False</code> (the default value), then the function returns <code>None</code>, but when it returns, then the prune operation has already been done.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.remove","title":"remove","text":"<pre><code>remove(containers, *, force=False, volumes=False)\n</code></pre> <p>Removes a container</p> <p>Alias: <code>docker.remove(...)</code></p> PARAMETER DESCRIPTION <code>containers</code> <p>One or more containers.</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>force</code> <p>Force the removal of a running container (uses SIGKILL)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>volumes</code> <p>Remove anonymous volumes associated with the container</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.remove--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.rename","title":"rename","text":"<pre><code>rename(container, new_name)\n</code></pre> <p>Changes the name of a container.</p> <p>Alias: <code>docker.rename(...)</code></p> PARAMETER DESCRIPTION <code>container</code> <p>The container to rename</p> <p> TYPE: <code>ValidContainer</code> </p> <code>new_name</code> <p>The new name of the container.</p> <p> TYPE: <code>str</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.rename--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exist.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.restart","title":"restart","text":"<pre><code>restart(containers, time=None)\n</code></pre> <p>Restarts one or more container.</p> <p>Alias: <code>docker.restart(...)</code></p> PARAMETER DESCRIPTION <code>containers</code> <p>One or more containers to restart</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>time</code> <p>Amount of to wait for stop before killing the container (default 10s). If <code>int</code>, the unit is seconds.</p> <p> TYPE: <code>Optional[Union[int, timedelta]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.restart--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.run","title":"run","text":"<pre><code>run(image, command=(), *, add_hosts=(), blkio_weight=None, blkio_weight_device=(), cap_add=(), cap_drop=(), cgroup_parent=None, cgroupns=None, cidfile=None, cpu_period=None, cpu_quota=None, cpu_rt_period=None, cpu_rt_runtime=None, cpu_shares=None, cpus=None, cpuset_cpus=None, cpuset_mems=None, detach=False, devices=(), device_cgroup_rules=(), device_read_bps=(), device_read_iops=(), device_write_bps=(), device_write_iops=(), content_trust=False, dns=(), dns_options=(), dns_search=(), domainname=None, entrypoint=None, envs={}, env_files=(), env_host=False, expose=(), gpus=None, groups_add=(), healthcheck=True, health_cmd=None, health_interval=None, health_retries=None, health_start_period=None, health_timeout=None, hostname=None, init=False, interactive=False, ip=None, ip6=None, ipc=None, isolation=None, kernel_memory=None, labels={}, label_files=(), link=(), link_local_ip=(), log_driver=None, log_options=(), mac_address=None, memory=None, memory_reservation=None, memory_swap=None, memory_swappiness=None, mounts=(), name=None, networks=(), network_aliases=(), oom_kill=True, oom_score_adj=None, pid=None, pids_limit=None, platform=None, pod=None, preserve_fds=None, privileged=False, publish=(), publish_all=False, pull='missing', read_only=False, restart=None, remove=False, runtime=None, security_options=(), shm_size=None, sig_proxy=True, stop_signal=None, stop_timeout=None, storage_options=(), stream=False, sysctl={}, systemd=None, tmpfs=(), tty=False, tz=None, ulimit=(), user=None, userns=None, uts=None, volumes=(), volume_driver=None, volumes_from=(), workdir=None)\n</code></pre> <p>Runs a container</p> <p>You can use <code>docker.run</code> or <code>docker.container.run</code> to call this function.</p> <p>For a deeper dive into the arguments and what they do, visit https://docs.docker.com/engine/reference/run/</p> <p>If you want to know exactly how to call <code>docker.run()</code> depending on your use case (detach, stream...), take a look at the <code>docker.run()</code> guide.</p> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n&gt;&gt;&gt; returned_string = docker.run(\"hello-world\")\n&gt;&gt;&gt; print(returned_string)\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n</code></pre> <pre><code>&gt;&gt;&gt; from python_on_whales import docker\n&gt;&gt;&gt; result_string = docker.run(\"ubuntu\", [\"ls\", \"/host\"], volumes=[(\"/\", \"/host\", \"ro\")])\n&gt;&gt;&gt; print(result_string)\nbin\nboot\ndev\netc\nhome\ninit\nlib\nlib64\nlost+found\nmedia\nmnt\nopt\nproc\nprojects\nroot\nrun\nsbin\nsnap\nsrv\nsys\ntmp\nusr\nvar\n</code></pre> PARAMETER DESCRIPTION <code>image</code> <p>The image to use for the container.</p> <p> TYPE: <code>ValidImage</code> </p> <code>command</code> <p>Sequence of arguments to provide to the container.</p> <p> TYPE: <code>Sequence[str]</code> DEFAULT: <code>()</code> </p> <code>add_hosts</code> <p>hosts to add in the format of a tuple. For example, <code>add_hosts=[(\"my_host_1\", \"192.168.30.31\"), (\"host2\", \"192.168.80.81\")]</code></p> <p> TYPE: <code>Iterable[Tuple[str, str]]</code> DEFAULT: <code>()</code> </p> <code>blkio_weight</code> <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cgroupns</code> <p>Cgroup namespace mode to use, one of 'host' or 'private'.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>cpu_period</code> <p>Limit CPU CFS (Completely Fair Scheduler) period</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_quota</code> <p>Limit CPU CFS (Completely Fair Scheduler) quota</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_rt_period</code> <p>Limit CPU real-time period in microseconds</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_rt_runtime</code> <p>Limit CPU real-time runtime in microseconds</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_shares</code> <p>CPU shares (relative weight)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpus</code> <p>The maximal amount of cpu the container can use. <code>1</code> means one cpu core.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>cpuset_cpus</code> <p>CPUs in which to allow execution. Must be given as a list.</p> <p> TYPE: <code>Optional[List[int]]</code> DEFAULT: <code>None</code> </p> <code>cpuset_mems</code> <p>MEMs in which to allow execution. Must be given as a list.</p> <p> TYPE: <code>Optional[List[int]]</code> DEFAULT: <code>None</code> </p> <code>detach</code> <p>If <code>False</code>, returns the ouput of the container as a string. If <code>True</code>, returns a <code>python_on_whales.Container</code> object.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>dns_search</code> <p>Set custom DNS search domains</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>domainname</code> <p>Container NIS domain name</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>entrypoint</code> <p>Overwrite the default ENTRYPOINT of the image</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>envs</code> <p>Environment variables as a <code>dict</code>. For example: <code>{\"OMP_NUM_THREADS\": 3}</code></p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>env_files</code> <p>One or a list of env files.</p> <p> TYPE: <code>Union[ValidPath, Iterable[ValidPath]]</code> DEFAULT: <code>()</code> </p> <code>env_host</code> <p>Use host environment inside the container. Only supported with podman.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>gpus</code> <p>For this to work, you need the Nvidia container runtime The value needed is a <code>str</code> or <code>int</code>. Some examples of valid argument are <code>\"all\"</code> or <code>\"device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a\"</code> or <code>\"device=0,2\"</code>. If you want 3 gpus, just write <code>gpus=3</code>.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>hostname</code> <p>Container host name</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>interactive</code> <p>Leave stdin open during the duration of the process to allow communication with the parent process. Currently only works with <code>tty=True</code> for interactive use on the terminal.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ip</code> <p>IPv4 address (e.g., 172.30.100.104)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ip6</code> <p>IPv6 address (e.g., 2001:db8::33)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ipc</code> <p>IPC mode to use</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>isolation</code> <p>Container isolation technology</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>kernel_memory</code> <p>Kernel memory limit. <code>int</code> represents the number of bytes, but you can use <code>\"4k\"</code> or <code>2g</code> for example.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Set meta data on a container. The labels can be used later when filtering containers with <code>docker.ps(filters='...')</code>. The labels can also be found on each container with the attribute <code>my_container.config.labels</code>.</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>log_driver</code> <p>Logging driver for the container</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>mac_address</code> <p>Container MAC address (e.g., <code>\"92:d0:c6:0a:29:33\"</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>memory</code> <p>Memory limit, valid values are <code>1024</code> (ints are bytes) or <code>\"43m\"</code> or <code>\"6g\"</code>.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>memory_reservation</code> <p>Memory soft limit</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>memory_swap</code> <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>memory_swappiness</code> <p>Tune container memory swappiness (0 to 100) (default -1)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The container name. If not provided, one is automatically genrated for you.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>healthcheck</code> <p>Set to <code>False</code> to disable container periodic healthcheck.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>oom_kill</code> <p>Set to <code>False</code> to disable the OOM killer for this container.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>pid</code> <p>PID namespace to use</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pids_limit</code> <p>Tune container pids limit (set <code>-1</code> for unlimited)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>platform</code> <p>Set platform if server is multi-platform capable.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pod</code> <p>Create the container in an existing pod (only supported with podman).</p> <p> TYPE: <code>Optional[ValidPod]</code> DEFAULT: <code>None</code> </p> <code>preserve_fds</code> <p>The number of additional file descriptors to pass through to the container. Only supported by podman.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>privileged</code> <p>Give extended privileges to this container.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>publish</code> <p>Ports to publish, same as the <code>-p</code> argument in the Docker CLI. example are <code>[(8000, 7000) , (\"127.0.0.1:3000\", 2000)]</code> or <code>[(\"127.0.0.1:3000\", 2000, \"udp\")]</code>. You can also use a single entry in the tuple to signify that you want a random free port on the host. For example: <code>publish=[(80,)]</code>.</p> <p> TYPE: <code>Iterable[ValidPortMapping]</code> DEFAULT: <code>()</code> </p> <code>publish_all</code> <p>Publish all exposed ports to random ports.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>pull</code> <p>Pull image before running (\"always\"|\"missing\"|\"never\") (default \"missing\").</p> <p> TYPE: <code>str</code> DEFAULT: <code>'missing'</code> </p> <code>read_only</code> <p>Mount the container's root filesystem as read only.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>restart</code> <p>Restart policy to apply when a container exits (default \"no\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>remove</code> <p>Automatically remove the container when it exits.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>runtime</code> <p>Runtime to use for this container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>security_options</code> <p>Security options</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>shm_size</code> <p>Size of /dev/shm. <code>int</code> is for bytes. But you can use <code>\"512m\"</code> or <code>\"4g\"</code> for example.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>stop_timeout</code> <p>Signal to stop a container (default \"SIGTERM\")</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>storage_options</code> <p>Storage driver options for the container</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>systemd</code> <p>Whether to run in systemd mode. Only known to apply to Podman, see https://docs.podman.io/en/latest/markdown/podman-run.1.html#systemd-true-false-always</p> <p> TYPE: <code>Optional[Union[bool, Literal['always']]]</code> DEFAULT: <code>None</code> </p> <code>tty</code> <p>Allocate a pseudo-TTY. Allow the process to access your terminal to write on it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tz</code> <p>Set timezone in container, or <code>local</code> to match the host's timezone. See <code>/usr/share/zoneinfo/</code> for valid timezones. Note: This option is only known to apply to Podman containers.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>user</code> <p>Username or UID (format: <code>&lt;name|uid&gt;[:&lt;group|gid&gt;]</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>userns</code> <p>User namespace to use</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>uts</code> <p>UTS namespace to use</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>volumes</code> <p>Bind mount a volume. Some examples: <code>[(\"/\", \"/host\"), (\"/etc/hosts\", \"/etc/hosts\", \"rw\")]</code>.</p> <p> TYPE: <code>Iterable[VolumeDefinition]</code> DEFAULT: <code>()</code> </p> <code>volume_driver</code> <p>Optional volume driver for the container</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>workdir</code> <p>The directory in the container where the process will be executed.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.run--returns","title":"Returns","text":"<pre><code>The container output as a string if detach is `False` (the default),\nand a `python_on_whales.Container` if detach is `True`.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.start","title":"start","text":"<pre><code>start(containers, attach=False, interactive=False, stream=False, detach_keys=None)\n</code></pre> <p>Starts one or more created/stopped containers.</p> <p>Aliases: <code>docker.start</code>, <code>docker.container.start</code>, <code>python_on_whales.Container.start</code>.</p> PARAMETER DESCRIPTION <code>containers</code> <p>One or a list of containers.</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>attach</code> <p>Attach stdout/stderr and forward signals.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>interactive</code> <p>Attach stdin (ensure it is open).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream</code> <p>Stream output as a generator.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>detach_keys</code> <p>Override the key sequence for detaching a container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.stats","title":"stats","text":"<pre><code>stats(containers=None, all=False)\n</code></pre> <p>Get containers resource usage statistics</p> <p>Alias: <code>docker.stats(...)</code></p> <p>Usage: <pre><code>from python_on_whales import docker\n\ndocker.run(\"redis\", detach=True)\nprint(docker.stats())\n# [&lt;&lt;class 'python_on_whales.components.container.ContainerStats'&gt; object,\n# attributes are block_read=0, block_write=0, cpu_percentage=0.08,\n# container=e90ae41a5b17,\n# container_id=e90ae41a5b17df998584141692f1e361c485e8d00c37ee21fdc360d3523dd1c1,\n# memory_percentage=0.18, memory_used=11198791, memory_limit=6233071288,\n# container_name=crazy_northcutt, net_upload=696, net_download=0&gt;]\n</code></pre></p> <p>The data unit is the byte.</p> PARAMETER DESCRIPTION <code>all</code> <p>Get the stats of all containers, not just running ones.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>containers</code> <p>One or a list of containers.</p> <p> TYPE: <code>Optional[Union[ValidContainer, Iterable[ValidContainer]]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.stats--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.ContainerStats]`.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.stop","title":"stop","text":"<pre><code>stop(containers, time=None)\n</code></pre> <p>Stops one or more running containers</p> <p>Alias: <code>docker.stop(...)</code></p> <p>Aliases: <code>docker.stop</code>, <code>docker.container.stop</code>, <code>python_on_whales.Container.stop</code>.</p> PARAMETER DESCRIPTION <code>containers</code> <p>One or a list of containers.</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>time</code> <p>Seconds to wait for stop before killing a container (default 10)</p> <p> TYPE: <code>Optional[Union[int, timedelta]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.stop--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if any of the\ncontainers do not exist.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.top","title":"top","text":"<pre><code>top()\n</code></pre> <p>Get the running processes of a container</p> <p>Alias: <code>docker.top(...)</code></p> <p>Not yet implemented</p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.unpause","title":"unpause","text":"<pre><code>unpause(x)\n</code></pre> <p>Unpause all processes within one or more containers</p> <p>Alias: <code>docker.unpause(...)</code></p> PARAMETER DESCRIPTION <code>x</code> <p>One or more containers (name, id or <code>python_on_whales.Container</code> object).</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.unpause--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if any of the\ncontainers do not exist.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.update","title":"update","text":"<pre><code>update(x, /, *, blkio_weight=None, cpu_period=None, cpu_quota=None, cpu_rt_period=None, cpu_rt_runtime=None, cpu_shares=None, cpus=None, cpuset_cpus=None, cpuset_mems=None, kernel_memory=None, memory=None, memory_reservation=None, memory_swap=None, pids_limit=None, restart=None)\n</code></pre> <p>Update configuration of one or more containers</p> <p>Alias: <code>docker.update(...)</code></p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of containers to update.</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p> <code>blkio_weight</code> <p>Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_period</code> <p>Limit CPU CFS (Completely Fair Scheduler) period</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_quota</code> <p>Limit CPU CFS (Completely Fair Scheduler) quota</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_rt_period</code> <p>Limit CPU real-time period in microseconds</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_rt_runtime</code> <p>Limit CPU real-time runtime in microseconds</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpu_shares</code> <p>CPU shares (relative weight)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>cpus</code> <p>The maximal amount of cpu the container can use. <code>1</code> means one cpu core.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>cpuset_cpus</code> <p>CPUs in which to allow execution. Must be given as a list.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>cpuset_mems</code> <p>MEMs in which to allow execution. Must be given as a list.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>memory</code> <p>Memory limit, valid values are <code>1024</code> (ints are bytes) or <code>\"43m\"</code> or <code>\"6g\"</code>.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>memory_reservation</code> <p>Memory soft limit</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>memory_swap</code> <p>Swap limit equal to memory plus swap: '-1' to enable unlimited swap.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>pids_limit</code> <p>Tune container pids limit (set <code>-1</code> for unlimited)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>restart</code> <p>Restart policy to apply when a container exits (default \"no\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.update--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.wait","title":"wait","text":"<pre><code>wait(x)\n</code></pre> <p>Block until one or more containers stop, then returns their exit codes</p> <p>Alias: <code>docker.wait(...)</code></p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of containers to wait for.</p> <p> TYPE: <code>Union[ValidContainer, Iterable[ValidContainer]]</code> </p>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.wait--returns","title":"Returns","text":"<pre><code>An `int` if a single container was passed as argument or a list of ints\nif multiple containers were passed as arguments.\n</code></pre> <p>Some Examples:</p> <pre><code>cont = docker.run(\"ubuntu\", [\"bash\", \"-c\", \"sleep 2 &amp;&amp; exit 8\"], detach=True)\n\nexit_code = docker.wait(cont)\n\nprint(exit_code)\n# 8\ndocker.container.remove(cont)\n</code></pre> <pre><code>cont_1 = docker.run(\"ubuntu\", [\"bash\", \"-c\", \"sleep 4 &amp;&amp; exit 8\"], detach=True)\ncont_2 = docker.run(\"ubuntu\", [\"bash\", \"-c\", \"sleep 2 &amp;&amp; exit 10\"], detach=True)\n\nexit_codes = docker.wait([cont_1, cont_2])\n\nprint(exit_codes)\n# [8, 10]\ndocker.container.remove([cont_1, cont_2])\n</code></pre>"},{"location":"sub-commands/container/#python_on_whales.components.container.cli_wrapper.ContainerCLI.wait--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchContainer` if the container does not exists.\n</code></pre>"},{"location":"sub-commands/context/","title":"docker context","text":""},{"location":"sub-commands/context/#how-to-use-docker-contexts","title":"How to use Docker contexts","text":"<p>Docker contexts allow you to connect to docker daemons other than the local one. This is similar to the <code>-H</code> argument of the Docker command.</p> <p>Contexts commands allow you to declare, save, list local and remote Docker daemons and Kubernetes endpoints that you have.</p> <p>An exemple here with python-on-whales:</p> <pre><code>from python_on_whales import docker, DockerContextConfig\n\nnew_context = docker.context.create(\n    \"my_remote_ssh_server\",\n    docker=DockerContextConfig(host=\"ssh://ubuntu@52.57.163.75\"),\n    description=\"my server ssh with a lot more power\"\n)\nprint(docker.context.list())\n# [python_on_whales.Context(name='default', endpoints={'docker': ContextEndpoint(host='unix:///var/run/docker.sock', skip_tls_verify=False)}),\n# python_on_whales.Context(name='my_remote_ssh_server', endpoints={'docker': ContextEndpoint(host='ssh://ubuntu@52.57.163.75', skip_tls_verify=False)})]\nnew_context.use()\n# it's the same to use docker.context.use(\"my_remote_ssh_server\") or docker.context.use(new_context)\n\nprint(docker.ps()) # will list the containers in the remote server\n# [python_on_whales.Container(id=...), python_on_whales.Container(id=...)]\n# return to the local docker daemon\ndocker.context.use(\"default\")\nprint(docker.ps()) # will list the containers running locally\n# [python_on_whales.Container(id=...)]\n</code></pre> <p>Note that for this simple use case, it's equivalent to use the <code>-H</code> option of the Docker client like so: <pre><code>from python_on_whales import DockerClient\n\ndocker = DockerClient(host=\"ssh://ubuntu@52.57.163.75\")\n\nprint(docker.ps())\n</code></pre></p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI","title":"ContextCLI","text":""},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.create","title":"create","text":"<pre><code>create(context_name, default_stack_orchestrator=None, description=None, from_=None, docker=None, kubernetes=None)\n</code></pre> <p>Creates a new context</p> PARAMETER DESCRIPTION <code>context_name</code> <p>name of the context to create</p> <p> TYPE: <code>str</code> </p> <code>default_stack_orchestrator</code> <p>Default orchestrator for stack operations to use with this context (swarm|kubernetes|all)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>description</code> <p>Description of the context</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>docker</code> <p>Set the docker endpoint, you can use a dict of a class to specify the options. The class is <code>python_on_whales.DockerContextConfig</code>.</p> <p> TYPE: <code>Union[Dict[str, Any], DockerContextConfig, None]</code> DEFAULT: <code>None</code> </p> <code>from_</code> <p>Create context from a named context</p> <p> TYPE: <code>Optional[ValidContext]</code> DEFAULT: <code>None</code> </p> <code>kubernetes</code> <p>Set the kubernetes endpoint. You can use a dict or a class to specify the options. The class is <code>python_on_whales.KubernetesContextConfig</code>.</p> <p> TYPE: <code>Union[Dict[str, Any], KubernetesContextConfig, None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.inspect","title":"inspect","text":"<pre><code>inspect(x=None)\n</code></pre> <p>Returns the context object. If no argument is provided, returns the current context.</p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>List all Docker contexts available</p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.list--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Context]`\n</code></pre>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.remove","title":"remove","text":"<pre><code>remove(x, force=False)\n</code></pre> <p>Removes one or more contexts</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more contexts, empty list means no-op.</p> <p> TYPE: <code>Union[ValidContext, List[ValidContext]]</code> </p> <code>force</code> <p>Force the removal of this context</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.update","title":"update","text":"<pre><code>update()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/context/#python_on_whales.components.context.cli_wrapper.ContextCLI.use","title":"use","text":"<pre><code>use(context)\n</code></pre> <p>Set the default context</p> PARAMETER DESCRIPTION <code>context</code> <p>The context to set as default</p> <p> TYPE: <code>ValidContext</code> </p>"},{"location":"sub-commands/image/","title":"docker image","text":""},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI","title":"ImageCLI","text":""},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.exists","title":"exists","text":"<pre><code>exists(x)\n</code></pre> <p>Returns <code>True</code> if the image exists. <code>False</code> otherwise.</p> <p>It's just calling <code>docker.image.inspect(...)</code> and verifies that it doesn't throw  a <code>python_on_whales.exceptions.NoSuchImage</code>.</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.exists--returns","title":"Returns","text":"<pre><code>A `bool`\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.history","title":"history","text":"<pre><code>history()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.import_","title":"import_","text":"<pre><code>import_(source, tag=None, changes=(), message=None, platform=None)\n</code></pre> <p>Import the contents from a tarball to create a filesystem image</p> <p>Alias: <code>docker.import_(...)</code></p> PARAMETER DESCRIPTION <code>changes</code> <p>Apply Dockerfile instruction to the created image</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>message</code> <p>Set commit message for imported image</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>platform</code> <p>Set platform if server is multi-platform capable</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Creates a <code>python_on_whales.Image</code> object.</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.inspect--returns","title":"Returns","text":"<pre><code>`python_on_whales.Image`, or `List[python_on_whales.Image]` if the input\nwas a list of strings.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.inspect--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchImage` if one of the images does not exists.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.legacy_build","title":"legacy_build","text":"<pre><code>legacy_build(context_path, add_hosts={}, build_args={}, cache=True, file=None, labels={}, network=None, pull=False, tags=(), target=None, isolation=None, quiet=True)\n</code></pre> <p>Build a Docker image with the old Docker builder (meaning not using buildx/buildkit)</p> <p>As the name implies this is a legacy building method. Users are strongly encouraged to use <code>docker.build()</code> instead. The legacy builder will not be available in docker v22.06 and above.</p> <p>This function also won't run the legacy builder if the environment variable <code>DOCKER_BUILDKIT</code> is set to <code>1</code> or if you had run previously <code>docker buildx install</code> from bash or <code>docker.buildx.install()</code> from Python.</p> <p>Some resources on why moving to buildx/buildkit is necessary:</p> <ul> <li>Proposal: make BuildKit the default builder on Linux</li> <li>Deprecated Engine Features: Legacy builder for Linux images</li> </ul> <p>A <code>python_on_whales.Image</code> is returned, even when using multiple tags. That is because it will produce a single image with multiple tags.</p> PARAMETER DESCRIPTION <code>context_path</code> <p>The path of the build context. Defaults to the current working directory</p> <p> TYPE: <code>ValidPath</code> </p> <code>add_hosts</code> <p>Hosts to add. <code>add_hosts={\"my_host1\": \"192.168.32.35\"}</code></p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>build_args</code> <p>The build arguments. ex <code>build_args={\"PY_VERSION\": \"3.7.8\", \"UBUNTU_VERSION\": \"20.04\"}</code>.</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>cache</code> <p>Whether or not to use the cache, defaults to True</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>file</code> <p>The path of the Dockerfile, defaults to <code>context_path/Dockerfile</code></p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Mapping of labels to add to the image. <code>labels={\"very-secure\": \"1\", \"needs-gpu\": \"0\"}</code> for example.</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>network</code> <p>which network to use when building the Docker image</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pull</code> <p>Always attempt to pull a newer version of the image</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tags</code> <p>Tag or tags to put on the resulting image.</p> <p> TYPE: <code>Union[str, Iterable[str]]</code> DEFAULT: <code>()</code> </p> <code>target</code> <p>Set the target build stage to build.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>isolation</code> <p>Specify isolation technology for container (useful for Windows).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>quiet</code> <p>If you don't want to display the progress bars.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.legacy_build--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Image`\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.list","title":"list","text":"<pre><code>list(repository_or_tag=None, filters=(), all=False)\n</code></pre> <p>Returns the list of Docker images present on the machine.</p> <p>Alias: <code>docker.images()</code></p> <p>Note that each image may have multiple tags.</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Image]` object.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.load","title":"load","text":"<pre><code>load(input, quiet=False)\n</code></pre> <p>Loads one or multiple Docker image(s) from a tar or an iterator of <code>bytes</code>.</p> <p>Alias: <code>docker.load(...)</code></p> PARAMETER DESCRIPTION <code>input</code> <p>Path or input stream to load the images from.</p> <p> TYPE: <code>Union[ValidPath, bytes, Iterator[bytes]]</code> </p> <code>quiet</code> <p>If you don't want to display the progress bars.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.load--returns","title":"Returns","text":"<pre><code>`None` when using bytes as input. A `List[str]` (list of tags)\n when a path is provided.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.prune","title":"prune","text":"<pre><code>prune(all=False, filters=())\n</code></pre> <p>Remove unused images</p> PARAMETER DESCRIPTION <code>all</code> <p>Remove all unused images, not just dangling ones</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filters</code> <p>Provide filter values (e.g. <code>[(\"until\", \"&lt;timestamp&gt;\")]</code>)</p> <p> TYPE: <code>Union[Iterable[ImageListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The output of the CLI (the layers removed).</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.pull","title":"pull","text":"<pre><code>pull(x, quiet=False, stream_logs=False, platform=None)\n</code></pre> <p>Pull one or more docker image(s)</p> <p>Alias: <code>docker.pull(...)</code></p> PARAMETER DESCRIPTION <code>x</code> <p>Image name(s), can be a string or a list of strings. In case a list is passed, multithreading is used to pull the images.</p> <p> TYPE: <code>Union[str, Iterable[str]]</code> </p> <code>quiet</code> <p>If you don't want to see the progress bars.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns the pulled image(s). If <code>True</code>, this function returns an <code>Iterable</code> of <code>Tuple[str, bytes]</code> where the first element corresponds to the image name that a pull is being done for. The second element is the log statement related to pull progress, as <code>bytes</code>. You'll need to call <code>.decode()</code> if you want the logs as <code>str</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>platform</code> <p>If you want to enforce a platform.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.push","title":"push","text":"<pre><code>push(x, quiet=False, stream_logs=False)\n</code></pre> <p>Push a tag or a repository to a registry</p> <p>Alias: <code>docker.push(...)</code></p> PARAMETER DESCRIPTION <code>x</code> <p>Tag(s) or repo(s) to push. Can be a string or an iterable of strings. If it's an iterable, python-on-whales will push all the images with multiple threads.</p> <p> TYPE: <code>Union[str, Iterable[str]]</code> </p> <code>quiet</code> <p>Don't print anything.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream_logs</code> <p>If <code>False</code> this function returns None. If <code>True</code>, this function returns an <code>Iterable</code> of <code>Tuple[str, bytes]</code> where the first element corresponds to the image or repository name that a push is being done for. The second element is the log statement related to push progress, as <code>bytes</code>. You'll need to call <code>.decode()</code> if you want the logs as <code>str</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.push--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchImage` if one of the images does not exist.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.remove","title":"remove","text":"<pre><code>remove(x, force=False, prune=True)\n</code></pre> <p>Remove one or more docker images.</p> PARAMETER DESCRIPTION <code>x</code> <p>Single image or iterable of Docker images to remove. You can use tags or <code>python_on_whales.Image</code> objects.</p> <p> TYPE: <code>Union[ValidImage, Iterable[ValidImage]]</code> </p> <code>force</code> <p>Force removal of the image(s).</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>prune</code> <p>Delete untagged parents.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.remove--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchImage` if one of the images does not exist.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.save","title":"save","text":"<pre><code>save(images, output=None)\n</code></pre> <p>Save one or more images to a tar archive. Returns a stream if output is <code>None</code></p> <p>Alias: <code>docker.save(...)</code></p> PARAMETER DESCRIPTION <code>images</code> <p>Single image or non-empty iterable of images to save.</p> <p> TYPE: <code>Union[ValidImage, Iterable[ValidImage]]</code> </p> <code>output</code> <p>Path of the tar archive to produce. If <code>output</code> is None, a generator of bytes is produced. It can be used to stream those bytes elsewhere, to another Docker daemon for example.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.save--returns","title":"Returns","text":"<pre><code>`Optional[Iterator[bytes]]`. If output is a path, nothing is returned.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.save--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchImage` if one of the images does not exist.\n</code></pre>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.save--example","title":"Example","text":"<p>An example of transfer of an image from a local Docker daemon to a remote Docker daemon. We assume that the remote machine has an ssh access:</p> <pre><code>from python_on_whales import DockerClient\n\nlocal_docker = DockerClient()\nremote_docker = DockerClient(host=\"ssh://my_user@186.167.32.84\")\n\nimage_name = \"busybox:1\"\nlocal_docker.pull(image_name)\nbytes_iterator = local_docker.image.save(image_name)\n\nremote_docker.image.load(bytes_iterator)\n</code></pre> <p>Of course the best solution is to use a registry to transfer images, but it's a cool example nonetheless.</p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.tag","title":"tag","text":"<pre><code>tag(source_image, new_tag)\n</code></pre> <p>Adds a tag to a Docker image.</p> <p>Alias: <code>docker.tag(...)</code></p> PARAMETER DESCRIPTION <code>source_image</code> <p>The Docker image to tag. You can use a tag to reference it.</p> <p> TYPE: <code>Union[Image, str]</code> </p> <code>new_tag</code> <p>The tag to add to the Docker image.</p> <p> TYPE: <code>str</code> </p>"},{"location":"sub-commands/image/#python_on_whales.components.image.cli_wrapper.ImageCLI.tag--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchImage` if the image does not exist.\n</code></pre>"},{"location":"sub-commands/manifest/","title":"docker manifest","text":""},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI","title":"ManifestCLI","text":""},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.annotate","title":"annotate","text":"<pre><code>annotate(name, manifest, arch=None, os=None, os_features=None, os_version=None, variant=None)\n</code></pre> <p>Annotates a Docker manifest list.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the manifest list</p> <p> TYPE: <code>str</code> </p> <code>manifest</code> <p>The individual manifest to annotate</p> <p> TYPE: <code>str</code> </p> <code>arch</code> <p>The manifest's architecture</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>os</code> <p>The manifest's operating system</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>os_features</code> <p>The manifest's operating system features</p> <p> TYPE: <code>Optional[List[str]]</code> DEFAULT: <code>None</code> </p> <code>os_version</code> <p>The manifest's operating system version</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>variant</code> <p>The manifest's architecture variant</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.create","title":"create","text":"<pre><code>create(name, manifests, ammend=False, insecure=False)\n</code></pre> <p>Creates a Docker manifest list.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the manifest list</p> <p> TYPE: <code>str</code> </p> <code>manifests</code> <p>The list of manifests to add to the manifest list</p> <p> TYPE: <code>List[str]</code> </p>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.ManifestList`.\n</code></pre>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a Docker manifest list object.</p>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.push","title":"push","text":"<pre><code>push(x, purge=False, quiet=False)\n</code></pre> <p>Push a manifest list to a repository.</p>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.push--options","title":"Options","text":"<pre><code>purge: Remove the local manifest list after push\n</code></pre>"},{"location":"sub-commands/manifest/#python_on_whales.components.manifest.cli_wrapper.ManifestCLI.remove","title":"remove","text":"<pre><code>remove(manifest_lists)\n</code></pre> <p>Removes a Docker manifest list or lists.</p> PARAMETER DESCRIPTION <code>manifest_lists</code> <p>One or more manifest lists.</p> <p> TYPE: <code>Union[ValidManifestList, List[ValidManifestList]]</code> </p>"},{"location":"sub-commands/network/","title":"docker network","text":""},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI","title":"NetworkCLI","text":""},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.connect","title":"connect","text":"<pre><code>connect(network, container, alias=None, driver_options=[], ip=None, ip6=None, links=[])\n</code></pre> <p>Connect a container to a network</p> PARAMETER DESCRIPTION <code>network</code> <p>The network to connect to</p> <p> TYPE: <code>ValidNetwork</code> </p> <code>container</code> <p>The container to connect</p> <p> TYPE: <code>ValidContainer</code> </p> <code>alias</code> <p>Add network-scoped alias for the container</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>driver_options</code> <p>Driver options for the network</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>ip</code> <p>IPv4 address (e.g., <code>\"172.30.100.104\"</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ip6</code> <p>IPv6 address (e.g., <code>\"2001:db8::33\"</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>links</code> <p>Add links to other containers</p> <p> TYPE: <code>List[ValidContainer]</code> DEFAULT: <code>[]</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.create","title":"create","text":"<pre><code>create(name, attachable=False, driver=None, gateway=None, subnet=None, labels={}, options=[])\n</code></pre> <p>Creates a Docker network.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the network</p> <p> TYPE: <code>str</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Network`.\n</code></pre>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.disconnect","title":"disconnect","text":"<pre><code>disconnect(network, container, force=False)\n</code></pre> <p>Disconnect a container from a network</p> PARAMETER DESCRIPTION <code>network</code> <p>The name of the network.</p> <p> TYPE: <code>ValidNetwork</code> </p> <code>container</code> <p>The container to disconnect.</p> <p> TYPE: <code>ValidContainer</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.exists","title":"exists","text":"<pre><code>exists(network)\n</code></pre> <p>Check if a network exists</p> PARAMETER DESCRIPTION <code>network</code> <p>The name of the network.</p> <p> TYPE: <code>ValidNetwork</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a <code>python_on_whales.Network</code> object from a string (id or network name).</p> PARAMETER DESCRIPTION <code>x</code> <p>One id or network name or a list of ids or network names.</p> <p> TYPE: <code>Union[str, List[str]]</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.inspect--returns","title":"Returns","text":"<pre><code>One or a list of `python_on_whales.Network`.\n</code></pre>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.list","title":"list","text":"<pre><code>list(filters=())\n</code></pre> <p>List all the networks available.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Filters to apply when listing networks.</p> <p> TYPE: <code>Union[Iterable[NetworkListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.list--returns","title":"Returns","text":"<pre><code>List of `python_on_whales.Network`.\n</code></pre>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.prune","title":"prune","text":"<pre><code>prune(filters=())\n</code></pre> <p>Remove Docker networks which are not used by any containers.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Filters to apply when finding networks to prune.</p> <p> TYPE: <code>Union[Iterable[NetworkListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/network/#python_on_whales.components.network.cli_wrapper.NetworkCLI.remove","title":"remove","text":"<pre><code>remove(networks)\n</code></pre> <p>Removes a Docker network</p> PARAMETER DESCRIPTION <code>networks</code> <p>One or more networks.</p> <p> TYPE: <code>Union[ValidNetwork, List[ValidNetwork]]</code> </p>"},{"location":"sub-commands/node/","title":"docker node","text":""},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI","title":"NodeCLI","text":""},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.demote","title":"demote","text":"<pre><code>demote(x)\n</code></pre> <p>Demote one or more nodes from manager in the swarm</p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of nodes.</p> <p> TYPE: <code>Union[ValidNode, List[ValidNode]]</code> </p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a <code>python_on_whales.Node</code> object from a string (id or hostname of the node)</p> PARAMETER DESCRIPTION <code>x</code> <p>One id or hostname or a list of ids or hostnames</p> <p> TYPE: <code>Union[str, List[str]]</code> </p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.inspect--returns","title":"Returns","text":"<pre><code>One or a list of `python_on_whales.Node`\n</code></pre>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>Returns the list of nodes in this swarm.</p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Node]`\n</code></pre>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.promote","title":"promote","text":"<pre><code>promote(x)\n</code></pre> <p>Promote one or more nodes to manager in the swarm</p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of nodes.</p> <p> TYPE: <code>Union[ValidNode, List[ValidNode]]</code> </p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.ps","title":"ps","text":"<pre><code>ps(x=None)\n</code></pre> <p>Returns the list of swarm tasks running on one or more nodes.</p> <pre><code>from python_on_whales import docker\n\ntasks = docker.node.ps(\"my-node-name\")\nprint(tasks[0].desired_state)\n# running\n</code></pre> PARAMETER DESCRIPTION <code>x</code> <p>One or more nodes (can be id, name or <code>python_on_whales.Node</code> object.). If the argument is not provided, it defaults to the current node. An empty list means an empty list will also be returned.</p> <p> TYPE: <code>Union[ValidNode, List[ValidNode], None]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.ps--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Task]`\n</code></pre>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.remove","title":"remove","text":"<pre><code>remove(x, force=False)\n</code></pre> <p>Remove one or more nodes from the swarm</p> PARAMETER DESCRIPTION <code>x</code> <p>One node or a list of nodes. You can use the id or the hostname of a node. You can also use a <code>python_on_whales.Node</code>.</p> <p> TYPE: <code>Union[ValidNode, List[ValidNode]]</code> </p> <code>force</code> <p>Force remove a node from the swarm</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/node/#python_on_whales.components.node.cli_wrapper.NodeCLI.update","title":"update","text":"<pre><code>update(node, availability=None, labels_add={}, rm_labels=[], role=None)\n</code></pre> <p>Updates a Swarm node.</p> PARAMETER DESCRIPTION <code>node</code> <p>The node to update, you can use a string or a <code>python_on_whales.Node</code> object.</p> <p> TYPE: <code>ValidNode</code> </p> <code>availability</code> <p>Availability of the node (\"active\"|\"pause\"|\"drain\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>labels_add</code> <p>Remove a node label if exists</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>rm_labels</code> <p>Labels to remove from the node.</p> <p> TYPE: <code>List[str]</code> DEFAULT: <code>[]</code> </p> <code>role</code> <p>Role of the node (\"worker\"|\"manager\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/plugin/","title":"docker plugin","text":""},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI","title":"PluginCLI","text":""},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.create","title":"create","text":"<pre><code>create(plugin_name, plugin_data_directory, compress=False)\n</code></pre> <p>Create a plugin from a rootfs and configuration.</p> PARAMETER DESCRIPTION <code>plugin_name</code> <p>The name you want to give to your plugin</p> <p> TYPE: <code>str</code> </p> <code>plugin_data_directory</code> <p>Must contain config.json and rootfs directory.</p> <p> TYPE: <code>ValidPath</code> </p> <code>compress</code> <p>Compress the context using gzip</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.disable","title":"disable","text":"<pre><code>disable(plugin, force=False)\n</code></pre> <p>Disable a plugin</p> PARAMETER DESCRIPTION <code>plugin</code> <p>The plugin to disable</p> <p> TYPE: <code>ValidPlugin</code> </p> <code>force</code> <p>Force the disable of an active plugin</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.enable","title":"enable","text":"<pre><code>enable(plugin, timeout=None)\n</code></pre> <p>Enable a plugin</p> PARAMETER DESCRIPTION <code>plugin</code> <p>The plugin to enable</p> <p> TYPE: <code>ValidPlugin</code> </p> <code>timeout</code> <p>HTTP client timeout (in seconds) (default 30)</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a <code>python_on_whales.Plugin</code> object from a string (name or id of the plugin)</p> PARAMETER DESCRIPTION <code>x</code> <p>One id or hostname or a list of name or ids</p> <p> TYPE: <code>Union[str, List[str]]</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.inspect--returns","title":"Returns","text":"<pre><code>One or a list of `python_on_whales.Plugin`\n</code></pre>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.install","title":"install","text":"<pre><code>install(plugin_name, configuration={}, alias=None, disable=False, disable_content_trust=True)\n</code></pre> <p>Installs a Docker plugin</p> <p>Warning: <code>--grant-all-permissions</code> is enabled, which means the program won't stop to ask you to grant the permissions.</p> PARAMETER DESCRIPTION <code>plugin_name</code> <p>The name of the plugin you want to install</p> <p> TYPE: <code>str</code> </p> <code>configuration</code> <p>A <code>dict</code> adding configuration options to the plugin</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>alias</code> <p>Local name for plugin</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>disable</code> <p>Do not enable the plugin on install</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disable_content_trust</code> <p>Skip image verification (default <code>True</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.install--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Plugin`.\n</code></pre>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>Returns a <code>List[python_on_whales.Plugin</code> that are installed on the daemon.</p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.push","title":"push","text":"<pre><code>push(plugin, disable_content_trust=True)\n</code></pre> <p>Push a plugin to a registry.</p> PARAMETER DESCRIPTION <code>plugin</code> <p>The plugin to push</p> <p> TYPE: <code>ValidPlugin</code> </p> <code>disable_content_trust</code> <p>Skip image signing (default <code>True</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.remove","title":"remove","text":"<pre><code>remove(x, force=False)\n</code></pre> <p>Removes one or more plugins</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more plugins to remove.</p> <p> TYPE: <code>Union[ValidPlugin, List[ValidPlugin]]</code> </p> <code>force</code> <p>Force the removal of this plugin.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.set","title":"set","text":"<pre><code>set(plugin, configuration)\n</code></pre> <p>Change the settings for a plugin</p> PARAMETER DESCRIPTION <code>plugin</code> <p>The plugin that needs its settings changed</p> <p> TYPE: <code>ValidPlugin</code> </p> <code>configuration</code> <p>The new configuration options.</p> <p> TYPE: <code>Dict[str, str]</code> </p>"},{"location":"sub-commands/plugin/#python_on_whales.components.plugin.cli_wrapper.PluginCLI.upgrade","title":"upgrade","text":"<pre><code>upgrade(plugin, remote=None, disable_content_trust=True, skip_remote_check=False)\n</code></pre> <p>Upgrade a plugin</p> <p>Warning: <code>--grant-all-permissions</code> is enabled, which means the program won't stop to ask you to grant the permissions.</p> PARAMETER DESCRIPTION <code>plugin</code> <p>The plugin to upgrade</p> <p> TYPE: <code>ValidPlugin</code> </p> <code>remote</code> <p>The remote to fetch the upgrade from</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>disable_content_trust</code> <p>Skip image verification (default <code>True</code>)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>skip_remote_check</code> <p>Do not check if specified remote plugin matches existing plugin image</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/pod/","title":"podman pod","text":""},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI","title":"PodCLI","text":""},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.create","title":"create","text":"<pre><code>create(name=None, *, add_hosts=(), cgroup_parent=None, cpus=None, cpuset_cpus=None, devices=(), device_read_bps=(), dns=(), dns_options=(), dns_search=(), exit_policy=None, gidmaps=(), hostname=None, infra=None, infra_command=None, infra_conmon_pidfile=None, infra_image=None, infra_name=None, ip=None, ip6=None, labels={}, label_files=(), mac_address=None, memory=None, networks=(), network_aliases=(), no_hosts=False, pid=None, pod_id_file=None, publish=(), replace=False, restart=None, security_options=(), share=None, shm_size=None, subgidname=None, subuidname=None, sysctl={}, uidmaps=(), userns=None, uts=None, volumes=(), volumes_from=())\n</code></pre> <p>Creates a pod, but does not start it.</p> <p>Start it then with the <code>.start()</code> method.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name to set the pod to. If not specified a name is generated.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>add_hosts</code> <p>Add a custom host-to-IP mapping (format 'host:ip'), which adds a line to /etc/hosts. Conflicts with the no_hosts option.</p> <p> TYPE: <code>Iterable[Tuple[str, str]]</code> DEFAULT: <code>()</code> </p> <code>cgroup_parent</code> <p>Path to cgroups under which the cgroup for the pod is created. If the path is not absolute, the path is considered to be relative to the cgroups path of the init process.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>cpus</code> <p>Set the total number of CPUs delegated to the pod. The default is 0.0 indicating that there is no limit on computation power.</p> <p> TYPE: <code>Optional[float]</code> DEFAULT: <code>None</code> </p> <code>cpuset_cpus</code> <p>CPUs in which to allow execution.</p> <p> TYPE: <code>Optional[Iterable[int]]</code> DEFAULT: <code>None</code> </p> <code>devices</code> <p>List of device names to pass from the host to containers in the pod.</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>device_read_bps</code> <p>Limit read rate (in bytes per second) from a device (e.g. device_read_bps=/dev/sda:1mb).</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>dns</code> <p>Set custom DNS servers in the /etc/resolv.conf file that is shared between all containers in the pod.</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>dns_options</code> <p>Set custom DNS options in the /etc/resolv.conf file that is shared between all containers in the pod.</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>dns_search</code> <p>Set custom DNS search domains in the /etc/resolv.conf file that is shared between all containers in the pod.</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>exit_policy</code> <p>Set the exit policy of the pod when the last container exits. Supported policies are 'continue' (default) and 'stop'.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>gidmaps</code> <p>GID map for the user namespace. Using this flag runs all containers in the pod with user namespace enabled. It conflicts with the --userns and --subgidname flags.</p> <p> TYPE: <code>Iterable[Tuple[int, int, int]]</code> DEFAULT: <code>()</code> </p> <code>hostname</code> <p>Set the pod's hostname.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>infra</code> <p>Whether to create an infra container and associate it with the pod. An infra container is a lightweight container used to coordinate the shared kernel namespace of a pod.</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>infra_command</code> <p>Specify the command that is run to start the infra container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>infra_conmon_pidfile</code> <p>Write the pid of the infra container's conmon process to a file.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>infra_image</code> <p>The custom image that is used for the infra container.</p> <p> TYPE: <code>Optional[ValidImage]</code> DEFAULT: <code>None</code> </p> <code>infra_name</code> <p>The name that is used for the pod's infra container.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ip</code> <p>Specify a static IPv4 address for the pod, for example 10.88.64.128. This option can only be used if the pod is joined to only a single network - i.e., network=network-name is used at most once - and if the pod is not joining another container's network namespace via network=container:id. The address must be within the network's IP address pool (default 10.88.0.0/16).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>ip6</code> <p>Specify a static IPv6 address for the pod, for example fd46:db93:aa76:ac37::10. This option can only be used if the pod is joined to only a single network (see note on the ip argument). The address must be within the network's IPv6 address pool.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Add metadata labels to a pod.</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>label_files</code> <p>Read in a line-delimited file of labels.</p> <p> TYPE: <code>Iterable[ValidPath]</code> DEFAULT: <code>()</code> </p> <code>mac_address</code> <p>Pod network interface MAC address (e.g. 92:d0:c6:0a:29:33). This option can only be used if the pod is joined to only a single network (see note on the ip argument).</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>memory</code> <p>Memory limit for the pod.</p> <p> TYPE: <code>Union[int, str, None]</code> DEFAULT: <code>None</code> </p> <code>networks</code> <p>Specify networks to use for the pod.</p> <p> TYPE: <code>Iterable[ValidNetwork]</code> DEFAULT: <code>()</code> </p> <code>network_aliases</code> <p>Add network-scoped aliases for the pod, setting the alias for all networks that the container joins.</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>no_hosts</code> <p>Do not create /etc/hosts for the pod. This option conflicts with --add-host.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>pid</code> <p>Set the PID mode for the pod. The default is to create a private PID namespace for the pod.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>pod_id_file</code> <p>Write the pod ID to the specified file.</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>publish</code> <p>Publish a container's port, or range of ports, within this pod to the host.</p> <p> TYPE: <code>Iterable[ValidPortMapping]</code> DEFAULT: <code>()</code> </p> <code>replace</code> <p>If another pod with the same name already exists, replace and remove it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>restart</code> <p>Restart policy for containers in the pod.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>security_options</code> <p>Security options (AppArmor or SELinux).</p> <p> TYPE: <code>Iterable[str]</code> DEFAULT: <code>()</code> </p> <code>share</code> <p>Namespaces to share between containers in the pod.</p> <p> TYPE: <code>Optional[Iterable[str]]</code> DEFAULT: <code>None</code> </p> <code>shm_size</code> <p>Size of /dev/shm.</p> <p> TYPE: <code>Optional[Union[int, str]]</code> DEFAULT: <code>None</code> </p> <code>subgidname</code> <p>Run the container in a new user namespace using the map with name in the /etc/subgid file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>subuidname</code> <p>Run the container in a new user namespace using the map with name in the /etc/subuid file.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>sysctl</code> <p>Configure namespaced kernel parameters for all containers in the pod.</p> <p> TYPE: <code>Mapping[str, str]</code> DEFAULT: <code>{}</code> </p> <code>uidmaps</code> <p>Run all containers in the pod in a new user namespace using the supplied UID mapping. This option conflicts with the userns and subuidname options.</p> <p> TYPE: <code>Iterable[Tuple[int, int, int]]</code> DEFAULT: <code>()</code> </p> <code>userns</code> <p>Set the user namespace mode for all the containers in a pod.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>uts</code> <p>Set the UTS namespace mode for the pod.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>volumes</code> <p>Specify volumes passed to all containers in the pod.</p> <p> TYPE: <code>Iterable[VolumeDefinition]</code> DEFAULT: <code>()</code> </p> <code>volumes_from</code> <p>Mount volumes from the specified container(s).</p> <p> TYPE: <code>Iterable[ValidContainer]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Pod` object.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.exists","title":"exists","text":"<pre><code>exists(pod)\n</code></pre> <p>Returns <code>True</code> if the pod exists. <code>False</code> otherwise.</p> <p>It's just calling <code>podman.pod.inspect(...)</code> and verifies that it doesn't throw  a <code>python_on_whales.exceptions.NoSuchPod</code>.</p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.exists--returns","title":"Returns","text":"<pre><code>A `bool`\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Creates a <code>python_on_whales.Pod</code> object.</p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.inspect--returns","title":"Returns","text":"<pre><code>`python_on_whales.Pod`, or `List[python_on_whales.Pod]` if the input\nwas a list of strings.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.inspect--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if one of the pods does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.kill","title":"kill","text":"<pre><code>kill(x, /, *, signal=None)\n</code></pre> <p>Kill pods.</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to kill</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p> <code>signal</code> <p>The signal to send the pods' containers</p> <p> TYPE: <code>Optional[Union[int, str]]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.kill--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if a pod does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.list","title":"list","text":"<pre><code>list(*, filters=())\n</code></pre> <p>List the pods on the host.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Filters to apply when listing pods</p> <p> TYPE: <code>Union[Iterable[PodListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Pod]`\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.logs","title":"logs","text":"<pre><code>logs(pod, container=None, *, names=False, since=None, tail=None, timestamps=False, until=None, follow=False, stream=False)\n</code></pre> <p>Returns the logs of a pod's containers as a string or an iterator.</p> PARAMETER DESCRIPTION <code>pod</code> <p>The pod to get the container logs of</p> <p> TYPE: <code>ValidPod</code> </p> <code>container</code> <p>Filter logs by container</p> <p> TYPE: <code>Optional[ValidContainer]</code> DEFAULT: <code>None</code> </p> <code>names</code> <p>Output container names instead of IDs in the logs</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>since</code> <p>Use a datetime or timedelta to specify the lower date limit for the logs.</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>tail</code> <p>Number of lines to show from the end of the logs (default all)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>timestamps</code> <p>Put timestamps next to lines.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>until</code> <p>Use a datetime or a timedelta to specify the upper date limit for the logs.</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>follow</code> <p>If <code>False</code> (the default), the logs returned are the logs up to the time of the function call. If <code>True</code>, the logs of the container up to the time the container stopped are displayed. Which means that if the container isn't stopped yet, the function will continue until the container is stopped. Which is why it is advised to use the <code>stream</code> option if you use the <code>follow</code> option. Without <code>stream</code>, only a <code>str</code> will be returned, possibly much later in the future. With <code>stream</code>, you'll be able to read the logs in real time.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream</code> <p>Similar to the <code>stream</code> argument of <code>docker.run</code>. This function will then return an iterator that will yield a tuple <code>(source, content)</code> with <code>source</code> being <code>\"stderr\"</code> or <code>\"stdout\"</code>. <code>content</code> is the content of the line as bytes. Take a look at the user guide to have an example of the output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.logs--returns","title":"Returns","text":"<pre><code>`str` if `stream=False` (the default), `Iterable[Tuple[str, bytes]]`\nif `stream=True`.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.logs--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if the container does not exist.\n</code></pre> <p>If you are a bit confused about <code>follow</code> and <code>stream</code>, here are some use cases.</p> <ul> <li>If you want to have the logs up to this point as a <code>str</code>, don't use those args.</li> <li>If you want to stream the output in real time, use <code>follow=True, stream=True</code></li> <li>If you want the logs up to this point, but you don't want to fit all the logs in memory because they are too big, use <code>stream=True</code>.</li> </ul>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.pause","title":"pause","text":"<pre><code>pause(x)\n</code></pre> <p>Pauses one or more pods</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to pause</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.pause--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any pods does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.prune","title":"prune","text":"<pre><code>prune()\n</code></pre> <p>Remove pods that are not running.</p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.remove","title":"remove","text":"<pre><code>remove(x, /, *, force=False, ignore=False, time=None)\n</code></pre> <p>Remove one or more pods.</p> PARAMETER DESCRIPTION <code>x</code> <p>Single pod or list of pods to remove.</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p> <code>force</code> <p>Force removal of the pods</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore</code> <p>Ignore errors when specified pod is missing</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>time</code> <p>Seconds to wait for pod stop before killing the containers</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.remove--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any of the pods do not\nexist and `ignore` was not set.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.restart","title":"restart","text":"<pre><code>restart(x)\n</code></pre> <p>Restarts one or more pods</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to restart</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.restart--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any pods does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.start","title":"start","text":"<pre><code>start(x)\n</code></pre> <p>Starts one or more pods</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to start</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.start--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any pods does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.stats","title":"stats","text":"<pre><code>stats(x)\n</code></pre> <p>Get pods resource usage statistics</p> <p>The data unit is the byte.</p> PARAMETER DESCRIPTION <code>x</code> <p>One or a list of pods</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.stats--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.PodStats]`.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.stop","title":"stop","text":"<pre><code>stop(x, /, *, time=None)\n</code></pre> <p>Stops one or more pods</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to stop</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p> <code>time</code> <p>Seconds to wait for pods to stop before killing containers</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.stop--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any pods does not exist.\n</code></pre>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.top","title":"top","text":"<pre><code>top(pod)\n</code></pre> <p>Get the running processes of a pod</p> <p>Not yet implemented</p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.unpause","title":"unpause","text":"<pre><code>unpause(x)\n</code></pre> <p>Unpauses one or more pods</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more pods to unpause</p> <p> TYPE: <code>Union[ValidPod, Iterable[ValidPod]]</code> </p>"},{"location":"sub-commands/pod/#python_on_whales.components.pod.cli_wrapper.PodCLI.unpause--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchPod` if any pod do not exist.\n</code></pre>"},{"location":"sub-commands/secret/","title":"docker secret","text":""},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI","title":"SecretCLI","text":""},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI.create","title":"create","text":"<pre><code>create(name, file, driver=None, labels={}, template_driver=None)\n</code></pre> <p>Creates a <code>python_on_whales.Secret</code>.</p>"},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI.create--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Secret` object.\n</code></pre>"},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns one or more <code>python_on_whales.Secret</code> based on an ID or name.</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more IDs/names.</p> <p> TYPE: <code>Union[str, List[str]]</code> </p>"},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI.list","title":"list","text":"<pre><code>list(filters=())\n</code></pre> <p>Returns all secrets as a <code>List[python_on_whales.Secret]</code>.</p>"},{"location":"sub-commands/secret/#python_on_whales.components.secret.cli_wrapper.SecretCLI.remove","title":"remove","text":"<pre><code>remove(x)\n</code></pre> <p>Removes one or more secrets</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more secrets. Name, ids or <code>python_on_whales.Secret</code> objects are valid inputs.</p> <p> TYPE: <code>Union[ValidSecret, List[ValidSecret]]</code> </p>"},{"location":"sub-commands/service/","title":"docker service","text":""},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI","title":"ServiceCLI","text":""},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.create","title":"create","text":"<pre><code>create(image, command, cap_add=[], cap_drop=[], constraints=[], detach=False, dns=[], dns_options=[], dns_search=[], endpoint_mode=None, entrypoint=None, envs={}, env_files=[], generic_resources=[], groups=[], healthcheck=True, health_cmd=None, health_interval=None, health_retries=None, health_start_period=None, health_timeout=None, hosts={}, hostname=None, init=False, isolation=None, labels={}, limit_cpu=None, limit_memory=None, limit_pids=None, log_driver=None, network=None, restart_condition=None, restart_max_attempts=None, secrets=[], mounts=[])\n</code></pre> <p>Creates a Docker swarm service.</p> <p>Consider using 'docker stack deploy' instead as it's idempotent and easier to read for complex applications. docker stack deploy is basically docker compose for swarm clusters.</p> PARAMETER DESCRIPTION <code>image</code> <p>The image to use as the base for the service.</p> <p> TYPE: <code>str</code> </p> <code>command</code> <p>The command to execute in the container(s).</p> <p> TYPE: <code>Optional[List[str]]</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.exists","title":"exists","text":"<pre><code>exists(x)\n</code></pre> <p>Verify that a service exists.</p> <p>It's just calling <code>docker.service.inspect(...)</code> and verifies that it doesn't throw  a <code>python_on_whales.exceptions.NoSuchService</code>.</p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.exists--returns","title":"Returns","text":"<pre><code>A `bool`\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns one or a list of <code>python_on_whales.Service</code> object(s).</p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.inspect--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if one of the services\ndoesn't exists.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.list","title":"list","text":"<pre><code>list(filters=())\n</code></pre> <p>Returns the list of services</p> PARAMETER DESCRIPTION <code>filters</code> <p>If you want to filter the results based on a given condition. For example, <code>docker.service.list(filters=dict(label=\"my_label=hello\"))</code>.</p> <p> TYPE: <code>Union[Iterable[ServiceListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Services]`\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.logs","title":"logs","text":"<pre><code>logs(service, details=False, since=None, tail=None, timestamps=False, follow=False, raw=False, task_ids=True, resolve=True, truncate=True, stream=False)\n</code></pre> <p>Returns the logs of a service as a string or an iterator.</p> PARAMETER DESCRIPTION <code>service</code> <p>The service to get the logs of</p> <p> TYPE: <code>ValidService</code> </p> <code>details</code> <p>Show extra details provided to logs</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>since</code> <p>Use a datetime or timedelta to specify the lower date limit for the logs.</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>tail</code> <p>Number of lines to show from the end of the logs (default all)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>timestamps</code> <p>Put timestamps next to lines.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>follow</code> <p>If <code>False</code> (the default), the logs returned are the logs up to the time of the function call. If <code>True</code>, the logs of the container up to the time the service is stopped (removed) are displayed. Which is why you must use the <code>stream</code> option if you use the <code>follow</code> option. Without <code>stream</code>, only a <code>str</code> will be returned, possibly much later in the future (maybe never if the service is never removed). So this option is not possible (You'll get an error if you use follow and not stream). With <code>stream</code>, you'll be able to read the logs in real time and stop whenever you need.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>stream</code> <p>Similar to the <code>stream</code> argument of <code>docker.run()</code>. This function will then returns and iterator that will yield a tuple <code>(source, content)</code> with <code>source</code> being <code>\"stderr\"</code> or <code>\"stdout\"</code>. <code>content</code> is the content of the line as bytes. Take a look at the user guide to have an example of the output.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.logs--returns","title":"Returns","text":"<pre><code>`str` if `stream=False` (the default), `Iterable[Tuple[str, bytes]]`\nif `stream=True`.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.logs--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if the service does not exists.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.ps","title":"ps","text":"<pre><code>ps(x)\n</code></pre> <p>Returns the list of swarm tasks associated with this service.</p> <p>You can pass multiple services at once at this function.</p> <pre><code>from python_on_whales import docker\n\ntasks = docker.service.ps(\"my-service-name\")\nprint(tasks[0].desired_state)\n# running\n</code></pre> PARAMETER DESCRIPTION <code>x</code> <p>One or more services (can be id, name or <code>python_on_whales.Service</code> object.)</p> <p> TYPE: <code>Union[ValidService, List[ValidService]]</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.ps--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Task]`\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.ps--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if one of the services\ndoesn't exist.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.remove","title":"remove","text":"<pre><code>remove(services)\n</code></pre> <p>Removes a service</p> PARAMETER DESCRIPTION <code>services</code> <p>One or a list of services to remove.</p> <p> TYPE: <code>Union[ValidService, List[ValidService]]</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.remove--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if one of the services\ndoesn't exist.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.rollback","title":"rollback","text":"<pre><code>rollback()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.scale","title":"scale","text":"<pre><code>scale(new_scales, detach=False)\n</code></pre> <p>Scale one or more services.</p> PARAMETER DESCRIPTION <code>new_scales</code> <p>Mapping between services and the desired scales. For example you can provide <code>new_scale={\"service1\": 4, \"service2\": 8}</code></p> <p> TYPE: <code>Dict[ValidService, int]</code> </p> <code>detach</code> <p>If True, does not wait for the services to converge and return immediately.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.scale--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if one of the services\ndoesn't exists.\n</code></pre>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.update","title":"update","text":"<pre><code>update(service, detach=False, force=False, image=None, with_registry_authentication=False, quiet=False, replicas=None)\n</code></pre> <p>Update a service</p> <p>More options coming soon</p> PARAMETER DESCRIPTION <code>service</code> <p>The service to update</p> <p> TYPE: <code>ValidService</code> </p> <code>detach</code> <p>Exit immediately instead of waiting for the service to converge</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>force</code> <p>Force update even if no changes require it</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>image</code> <p>Service image tag</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>with_registry_authentication</code> <p>Send registry authentication details to swarm agents</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/service/#python_on_whales.components.service.cli_wrapper.ServiceCLI.update--raises","title":"Raises","text":"<pre><code>`python_on_whales.exceptions.NoSuchService` if the service doesn't exists.\n</code></pre>"},{"location":"sub-commands/stack/","title":"docker stack","text":""},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI","title":"StackCLI","text":""},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.deploy","title":"deploy","text":"<pre><code>deploy(name, compose_files=[], orchestrator=None, prune=False, resolve_image='always', with_registry_auth=False, env_files=[], variables={})\n</code></pre> <p>Deploys a stack.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the stack to deploy. Mandatory.</p> <p> TYPE: <code>str</code> </p> <code>compose_files</code> <p>One or more docker-compose files. If there are more than one, they will be fused together.</p> <p> TYPE: <code>Union[ValidPath, List[ValidPath]]</code> DEFAULT: <code>[]</code> </p> <code>orchestrator</code> <p>The orchestrator to use, `\"swarm\" or \"kubernetes\" or \"all\".</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>prune</code> <p>Prune services that are no longer referenced</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>resolve_image</code> <p>Query the registry to resolve image digest and supported platforms <code>\"always\"|\"changed\"|\"never\"</code> (default <code>\"always\"</code>). Note that if the registry cannot be queried when using <code>\"always\"</code>, it's going to try to use images present locally on the nodes.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'always'</code> </p> <code>with_registry_auth</code> <p>Send registry authentication details to Swarm agents. Required if you need to run <code>docker login</code> to pull the docker images in your stack.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>env_files</code> <p>Similar to <code>.env</code> files in docker-compose. Loads <code>variables</code> from <code>.env</code> files. If both <code>env_files</code> and <code>variables</code> are used, <code>variables</code> have priority. This behavior is similar to the one you would experience with compose.</p> <p> TYPE: <code>List[ValidPath]</code> DEFAULT: <code>[]</code> </p> <code>variables</code> <p>A dict dictating by what to replace the variables declared in the docker-compose files. In the docker CLI, you would use environment variables for this.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.deploy--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Stack` object.\n</code></pre>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>Returns a list of <code>python_on_whales.Stack</code></p>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.list--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Stack]`.\n</code></pre>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.ps","title":"ps","text":"<pre><code>ps(x)\n</code></pre> <p>Returns the list of swarm tasks in this stack.</p> <pre><code>from python_on_whales import docker\n\ntasks = docker.stack.ps(\"my-stack\")\nprint(tasks[0].desired_state)\n# running\n</code></pre> PARAMETER DESCRIPTION <code>x</code> <p>A stack . It can be name or a <code>python_on_whales.Stack</code> object.</p> <p> TYPE: <code>ValidStack</code> </p>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.ps--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Task]`\n</code></pre>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.remove","title":"remove","text":"<pre><code>remove(x)\n</code></pre> <p>Removes one or more stacks.</p> PARAMETER DESCRIPTION <code>x</code> <p>One or more stacks, empty list means nothing will be done.</p> <p> TYPE: <code>Union[ValidStack, List[ValidStack]]</code> </p>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.services","title":"services","text":"<pre><code>services(stack)\n</code></pre> <p>List the services present in the stack.</p> PARAMETER DESCRIPTION <code>stack</code> <p>A docker stack or the name of a stack.</p> <p> TYPE: <code>ValidStack</code> </p>"},{"location":"sub-commands/stack/#python_on_whales.components.stack.cli_wrapper.StackCLI.services--returns","title":"Returns","text":"<pre><code>A `List[python_on_whales.Stack]`\n</code></pre>"},{"location":"sub-commands/swarm/","title":"docker swarm","text":""},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI","title":"SwarmCLI","text":""},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.ca","title":"ca","text":"<pre><code>ca(ca_certificate=None, ca_key=None, certificate_expiry=None, detach=False, external_ca=None, rotate=False)\n</code></pre> <p>Get and rotate the root CA</p> PARAMETER DESCRIPTION <code>ca_certificate</code> <p>Path to the PEM-formatted root CA certificate to use for the new cluster</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>ca_key</code> <p>Path to the PEM-formatted root CA key to use for the new cluster</p> <p> TYPE: <code>Optional[ValidPath]</code> DEFAULT: <code>None</code> </p> <code>certificate_expiry</code> <p>Validity period for node certificates</p> <p> TYPE: <code>Union[int, timedelta, None]</code> DEFAULT: <code>None</code> </p> <code>detach</code> <p>Exit immediately instead of waiting for the root rotation to converge. The function will return <code>None</code>.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>external_ca</code> <p>Specifications of one or more certificate signing endpoints</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>rotate</code> <p>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.init","title":"init","text":"<pre><code>init(advertise_address=None, autolock=False, availability='active', data_path_address=None, data_path_port=None, listen_address=None)\n</code></pre> <p>Initialize a Swarm.</p> <p>If you need the token to join the new swarm from another node, use the <code>docker.swarm.join_token</code> function.</p> <p>A example of how to initialize the whole swarm without leaving the manager if the manager has ssh access to the workers: <pre><code>from python_on_whales import docker, DockerClient\n\nworker_docker = DockerClient(host=\"ssh://worker_linux_user@worker_hostname\")\n# Here the docker variable is connected to the local daemon\n# worker_docker is a connected to the Docker daemon of the\n# worker through ssh, useful to control it without login to the machine\n# manually.\ndocker.swarm.init()\nmy_token = docker.swarm.join_token(\"worker\")  # you can set manager too\nworker_docker.swarm.join(\"manager_hostname:2377\", token=my_token)\n</code></pre></p> PARAMETER DESCRIPTION <code>advertise_address</code> <p>Advertised address (format: <code>&lt;ip|interface&gt;[:port]</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>autolock</code> <p>Enable manager autolocking (requiring an unlock key to start a stopped manager)</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>availability</code> <p>Availability of the node (\"active\"|\"pause\"|\"drain\")</p> <p> TYPE: <code>str</code> DEFAULT: <code>'active'</code> </p> <code>data_path_address</code> <p>Address or interface to use for data path traffic (format is <code>&lt;ip|interface&gt;</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>listen_address</code> <p>address upon which the node listens for inbound swarm manager traffic (format: <code>&lt;ip|interface&gt;[:port]</code>)</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.join","title":"join","text":"<pre><code>join(manager_address, advertise_address=None, availability='active', data_path_address=None, listen_address=None, token=None)\n</code></pre> <p>Joins a swarm</p> PARAMETER DESCRIPTION <code>manager_address</code> <p>The address of the swarm manager in the format <code>\"{ip}:{port}\"</code></p> <p> TYPE: <code>str</code> </p> <code>advertise_address</code> <p>Advertised address (format: [:port]) <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>availability</code> <p>Availability of the node (<code>\"active\"</code>|<code>\"pause\"</code>|<code>\"drain\"</code>)</p> <p> TYPE: <code>str</code> DEFAULT: <code>'active'</code> </p> <code>data_path_address</code> <p>Address or interface to use for data path traffic (format: ) <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>listen_address</code> <p>Listen address (format: [:port]) (default 0.0.0.0:2377) <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>token</code> <p>Token for entry into the swarm, will determine if the node enters the swarm as a manager or a worker.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.join_token","title":"join_token","text":"<pre><code>join_token(node_type, rotate=False)\n</code></pre> <p>Obtains a token to join the swarm</p> <p>This token can then be used with <code>docker.swarm.join(\"manager:2377\", token=my_token)</code>.</p> PARAMETER DESCRIPTION <code>node_type</code> <p><code>\"manager\"</code> or <code>\"worker\"</code></p> <p> TYPE: <code>str</code> </p> <code>rotate</code> <p>Rotate join token</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.leave","title":"leave","text":"<pre><code>leave(force=False)\n</code></pre> <p>Leave the swarm</p> PARAMETER DESCRIPTION <code>force</code> <p>Force this node to leave the swarm, ignoring warnings</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.unlock","title":"unlock","text":"<pre><code>unlock(key)\n</code></pre> <p>Unlock a swarm after the <code>--autolock</code> parameter was used and the daemon restarted.</p> PARAMETER DESCRIPTION <code>key</code> <p>The key to unlock the swarm. The key can be obtained on any manager with <code>docker.swarm.unlock_key()</code>.</p> <p> TYPE: <code>str</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.unlock_key","title":"unlock_key","text":"<pre><code>unlock_key(rotate=False)\n</code></pre> <p>Gives you the key needed to unlock the swarm after a manager daemon reboot.</p> PARAMETER DESCRIPTION <code>rotate</code> <p>Rotate the unlock key.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/swarm/#python_on_whales.components.swarm.cli_wrapper.SwarmCLI.update","title":"update","text":"<pre><code>update(autolock=None, cert_expiry=None, dispatcher_heartbeat=None, external_ca=None, max_snapshots=None, snapshot_interval=None, task_history_limit=None)\n</code></pre> <p>Update the swarm configuration</p> PARAMETER DESCRIPTION <code>autolock</code> <p>Change manager autolocking setting</p> <p> TYPE: <code>Optional[bool]</code> DEFAULT: <code>None</code> </p> <code>cert_expiry</code> <p>Validity period for node certificates, default is <code>datetime.timedelta(days=90)</code>. If <code>int</code>, it's a number of seconds.</p> <p> TYPE: <code>Optional[timedelta]</code> DEFAULT: <code>None</code> </p> <code>dispatcher_heartbeat</code> <p>Dispatcher heartbeat period.</p> <p> TYPE: <code>Optional[timedelta]</code> DEFAULT: <code>None</code> </p> <code>external_ca</code> <p>Specifications of one or more certificate signing endpoints</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>max_snapshots</code> <p>Number of additional Raft snapshots to retain</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>snapshot_interval</code> <p>Number of log entries between Raft snapshots (default 10000)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>task_history_limit</code> <p>Task history retention limit (default 5)</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p>"},{"location":"sub-commands/system/","title":"docker system","text":""},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI","title":"SystemCLI","text":""},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.disk_free","title":"disk_free","text":"<pre><code>disk_free()\n</code></pre> <p>Give information about the disk usage of the Docker daemon.</p> <p>Returns a <code>python_on_whales.DiskFreeResult</code> object.</p> <p><pre><code>from python_on_whales import docker\ndisk_free_result = docker.system.disk_free()\nprint(disk_free_result.images.active)  #int\nprint(disk_free_result.containers.reclaimable)  # int, number of bytes\nprint(disk_free_result.volumes.reclaimable_percent)  # float\nprint(disk_free_result.build_cache.total_count)  # int\nprint(disk_free_result.build_cache.size)  # int, number of bytes\n...\n</code></pre> Note that the number are not 100% accurate because the docker CLI doesn't provide the exact numbers.</p> <p>Maybe in a future implementation, we can provide exact numbers.</p> <p>Verbose mode is not yet implemented.</p>"},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.events","title":"events","text":"<pre><code>events(since=None, until=None, filters={})\n</code></pre> <p>Return docker events information up to the current point in time.</p> <p>If <code>until</code> is not specified, then the iterator returned is infinite. For example</p> <pre><code>from python_on_whales import docker\nfrom datetime import datetime, timedelta\n\n\nfor event in docker.system.events():\n    print(\"new event!\")\n    print(event)\n    # this will never end, that's ok if you want to monitor something\n    # for a long time. You can also use 'break' in the for loop if needed.\n\nfor event in docker.system.events(until=datetime.now() - timedelta(seconds=30)):\n    print(\"some past event\")\n    print(event)\n    # this loop will end, unlike the previous one\n\nfor event in docker.system.events(until=datetime.now() + timedelta(seconds=30)):\n    print(\"some past event\")\n    print(event)\n    # this loop will end in 30 seconds, even if there are no events at all\n\nevents = list(docker.system.events(filters={\"container\": \"mycontainer\"}, until=datetime.now()))\n# the list of all events concerning the container \"mycontainer\"\n</code></pre> PARAMETER DESCRIPTION <code>since</code> <p>Show all events created since timestamp</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>until</code> <p>Stream events until this timestamp</p> <p> TYPE: <code>Union[None, datetime, timedelta]</code> DEFAULT: <code>None</code> </p> <code>filters</code> <p>See the Docker documentation page about filtering .</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.events--returns","title":"Returns","text":"<pre><code>A iterator which will yield DockerEvent objects from stdout/stderr\n</code></pre> <p>reference page for system events</p>"},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.info","title":"info","text":"<pre><code>info()\n</code></pre> <p>Returns diverse information about the Docker client and daemon.</p>"},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.info--returns","title":"Returns","text":"<pre><code>A `python_on_whales.SystemInfo` object\n</code></pre> <p>As an example</p> <pre><code>from python_on_whales import docker\n\ninfo = docker.system.info()\nprint(info.images)\n# 40\nprint(info.plugins.volume)\n# [\"local\"}\n...\n</code></pre> <p>You can find all attributes available by looking up the reference page for system info.</p>"},{"location":"sub-commands/system/#python_on_whales.components.system.cli_wrapper.SystemCLI.prune","title":"prune","text":"<pre><code>prune(all=False, volumes=False, filters={})\n</code></pre> <p>Remove unused docker data</p> PARAMETER DESCRIPTION <code>all</code> <p>Remove all unused images not just dangling ones</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>volumes</code> <p>Prune volumes</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>filters</code> <p>See the Docker documentation page about filtering . For example, <code>filters=dict(until=\"24h\")</code>.</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/task/","title":"docker task","text":""},{"location":"sub-commands/task/#python_on_whales.components.task.cli_wrapper.TaskCLI","title":"TaskCLI","text":""},{"location":"sub-commands/task/#python_on_whales.components.task.cli_wrapper.TaskCLI.inspect","title":"inspect","text":"<pre><code>inspect(x)\n</code></pre> <p>Returns a <code>python_on_whales.Task</code> object from its ID.</p>"},{"location":"sub-commands/task/#python_on_whales.components.task.cli_wrapper.TaskCLI.list","title":"list","text":"<pre><code>list()\n</code></pre> <p>Returns all tasks in the swarm</p>"},{"location":"sub-commands/task/#python_on_whales.components.task.cli_wrapper.TaskCLI.list--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Task]`\n</code></pre>"},{"location":"sub-commands/task/#python_on_whales.components.task.cli_wrapper.TaskCLI.logs","title":"logs","text":"<pre><code>logs()\n</code></pre> <p>Not Yet implemented</p>"},{"location":"sub-commands/trust/","title":"docker trust","text":""},{"location":"sub-commands/trust/#python_on_whales.components.trust.cli_wrapper.TrustCLI","title":"TrustCLI","text":""},{"location":"sub-commands/trust/#python_on_whales.components.trust.cli_wrapper.TrustCLI.inspect","title":"inspect","text":"<pre><code>inspect()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/trust/#python_on_whales.components.trust.cli_wrapper.TrustCLI.revoke","title":"revoke","text":"<pre><code>revoke()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/trust/#python_on_whales.components.trust.cli_wrapper.TrustCLI.sign","title":"sign","text":"<pre><code>sign()\n</code></pre> <p>Not yet implemented</p>"},{"location":"sub-commands/volume/","title":"docker volume","text":""},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI","title":"VolumeCLI","text":""},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.clone","title":"clone","text":"<pre><code>clone(source, new_volume_name=None, driver=None, labels={}, options={})\n</code></pre> <p>Clone a volume.</p> PARAMETER DESCRIPTION <code>source</code> <p>The volume to clone</p> <p> TYPE: <code>ValidVolume</code> </p> <code>new_volume_name</code> <p>The new volume name. If not given, a random name is chosen.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>driver</code> <p>Specify volume driver name (default \"local\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Set metadata for a volume</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>options</code> <p>Set driver specific options</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.clone--returns","title":"Returns","text":"<pre><code>A `python_on_whales.Volume`, the new volume.\n</code></pre>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.copy","title":"copy","text":"<pre><code>copy(source, destination)\n</code></pre> <p>Copy files/folders between a volume and the local filesystem.</p> PARAMETER DESCRIPTION <code>source</code> <p>If <code>source</code> is a directory/file inside a Docker volume, a tuple <code>(my_volume, path_in_volume)</code> must be provided. The volume can be a <code>python_on_whales.Volume</code> or a volume name as <code>str</code>. The path can be a <code>pathlib.Path</code> or a <code>str</code>. If <code>source</code> is  a local directory, a <code>pathlib.Path</code> or <code>str</code> should be provided. End the source path with <code>/.</code> if you want to copy the directory content in another directory.</p> <p> TYPE: <code>Union[ValidPath, VolumePath]</code> </p> <code>destination</code> <p>Same as <code>source</code>.</p> <p> TYPE: <code>Union[ValidPath, VolumePath]</code> </p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.create","title":"create","text":"<pre><code>create(volume_name=None, driver=None, labels={}, options={})\n</code></pre> <p>Creates a volume</p> PARAMETER DESCRIPTION <code>volume_name</code> <p>The volume name, if not provided, a long random string will be used instead.</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>driver</code> <p>Specify volume driver name (default \"local\")</p> <p> TYPE: <code>Optional[str]</code> DEFAULT: <code>None</code> </p> <code>labels</code> <p>Set metadata for a volume</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p> <code>options</code> <p>Set driver specific options</p> <p> TYPE: <code>Dict[str, str]</code> DEFAULT: <code>{}</code> </p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.exists","title":"exists","text":"<pre><code>exists(x)\n</code></pre> <p>Returns <code>True</code> if the volume exists. <code>False</code> otherwise.</p> <p>It's just calling <code>docker.volume.inspect(...)</code> and verifies that it doesn't throw  a <code>python_on_whales.exceptions.NoSuchVolume</code>.</p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.exists--returns","title":"Returns","text":"<pre><code>A `bool`\n</code></pre>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.list","title":"list","text":"<pre><code>list(filters=())\n</code></pre> <p>List volumes</p> PARAMETER DESCRIPTION <code>filters</code> <p>See the Docker documentation page about filtering . An example <code>filters=[(\"dangling\", \"true\"), (\"driver\", \"local\")]</code>.</p> <p> TYPE: <code>Union[Iterable[VolumeListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.list--returns","title":"Returns","text":"<pre><code>`List[python_on_whales.Volume]`\n</code></pre>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.prune","title":"prune","text":"<pre><code>prune(filters=(), all=False)\n</code></pre> <p>Remove volumes</p> PARAMETER DESCRIPTION <code>filters</code> <p>See the Docker documentation page about filtering . An example <code>filters=[(\"dangling\", \"true\"), (\"driver\", \"local\")]</code>.</p> <p> TYPE: <code>Union[Iterable[VolumeListFilter], Mapping[str, Any]]</code> DEFAULT: <code>()</code> </p> <code>all</code> <p>Remove all unused volumes, not just anonymous ones.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"sub-commands/volume/#python_on_whales.components.volume.cli_wrapper.VolumeCLI.remove","title":"remove","text":"<pre><code>remove(x)\n</code></pre> <p>Removes one or more volumes</p> PARAMETER DESCRIPTION <code>x</code> <p>A volume or a list of volumes. An empty list as argument means nothing is done.</p> <p> TYPE: <code>Union[ValidVolume, List[ValidVolume]]</code> </p>"},{"location":"user_guide/docker_run/","title":"The different ways of using docker.run()","text":""},{"location":"user_guide/docker_run/#simple-call","title":"Simple call","text":"<pre><code>from python_on_whales import docker\n\nstdout_as_str = docker.run(\"hello-world\")\nprint(stdout_as_str)\n\n# Hello from Docker!\n# This message shows that your installation appears to be working correctly.\n# ...\n</code></pre> <p>This is the simplest way. The function <code>docker.run(...)</code> returns only when the container  is done and the output (stdout) is returned all at once in a single string.</p> <p>This is very practical for simple use cases, but not so much when you have a container that needs to run for a very long time for example, as you don't get the output in real time.</p>"},{"location":"user_guide/docker_run/#detach-the-container","title":"Detach the container","text":"<pre><code>from python_on_whales import docker\nfrom redis import Redis\n\nredis_container = docker.run(\"redis\", detach=True, publish=[(6379, 6379)])\n# the container is up and listening on port 6379\n\nredis_client = Redis()\nredis_client.set(\"hello\", \"world\")\nprint(redis_client.get(\"hello\"))\n# b'world'\n</code></pre> <p>This is a very simple way to start a container in the background. It will continue running  until the process inside exits. It's useful when running servers for example, because they should never stop.</p>"},{"location":"user_guide/docker_run/#detach-with-the-context-manager","title":"Detach with the context manager","text":"<pre><code>from python_on_whales import docker\nfrom redis import Redis\n\nwith docker.run(\"redis\", detach=True, publish=[(6379, 6379)]) as redis_container:\n    # the container is up and listening on port 6379\n    redis_client = Redis()\n    redis_client.set(\"hello\", \"world\")\n    print(redis_client.get(\"hello\"))\n    # b'world'\n\nprint(\"The container is now stopped and removed because we're outside the context manager\")\nprint(redis_container.state.running)  # will raise an error with the message \"no such container\"\n</code></pre> <p>Using the context manager is quite useful when you need the container running in the background but you need to know exactly for how long it will live.</p> <p>For example in unit tests, you might need a redis server to execute a function.  You can then have the redis container running only during this specific unit test.</p> <p>This is also better than calling manually <code>redis_container.remove()</code>. Why?  For the same reason it's better to do <code>with open(...) as f:</code> than <code>f = open(...)</code>. If an exception occurs  in the context manager block, the container is still removed.</p>"},{"location":"user_guide/docker_run/#stream-the-output","title":"Stream the output","text":"<pre><code>from python_on_whales import docker\n\noutput_generator = docker.run(\"busybox\", [\"ping\", \"-c\", \"50\", \"www.google.com\"], stream=True, name=\"box\")\n\nfor stream_type, stream_content in output_generator:\n    print(f\"Stream type: {stream_type}, stream content: {stream_content}\")\n\n# Stream type: stdout, stream content: b'PING www.google.com (142.250.74.228): 56 data bytes\\n'\n# Stream type: stdout, stream content: b'64 bytes from 142.250.74.228: seq=0 ttl=119 time=18.350 ms\\n'\n# Stream type: stdout, stream content: b'64 bytes from 142.250.74.228: seq=1 ttl=119 time=18.386 ms\\n'\n# ...\n# Stream type: stdout, stream content: b'64 bytes from 142.250.74.228: seq=48 ttl=119 time=18.494 ms\\n'\n# Stream type: stdout, stream content: b'64 bytes from 142.250.74.228: seq=49 ttl=119 time=18.260 ms\\n'\n# Stream type: stdout, stream content: b'\\n'\n# Stream type: stdout, stream content: b'--- www.google.com ping statistics ---\\n'\n# Stream type: stdout, stream content: b'50 packets transmitted, 50 packets received, 0% packet loss\\n'\n# Stream type: stdout, stream content: b'round-trip min/avg/max = 17.547/18.075/18.508 ms\\n'\n\n# when the generator is done and we're out of the loop\n# it means the container has finished running.\nprint(docker.container.inspect(\"box\").state.running)\n# False\n</code></pre> <p>This is very useful for long running processes. For example if you need the output  of a container that will stay up for a very long time.</p>"},{"location":"user_guide/exceptions/","title":"Capturing exceptions","text":""},{"location":"user_guide/exceptions/#exception-classes","title":"Exception classes","text":"<p>Exceptions raised will be an instance of <code>DockerException</code>, or a child class for more specific errors.</p> <p>Those are the child classes:</p> <ul> <li><code>NoSuchContainer</code></li> <li><code>NoSuchImage</code></li> <li><code>NoSuchService</code></li> <li><code>NotASwarmManager</code></li> <li><code>NoSuchVolume</code></li> </ul> <p>All exceptions will have these 4 attributes:</p> <ul> <li>docker_command: the docker command used internally, as a list of strings.</li> <li>return_code: the exit code docker client exited with, as an int</li> <li>stdout: the content that docker wrote to stdout, as a string, or <code>None</code></li> <li>stderr: the content that docker wrote to stderr, as a string, or <code>None</code></li> </ul>"},{"location":"user_guide/exceptions/#example","title":"Example","text":"<pre><code>import logging\nfrom python_on_whales import DockerClient\nfrom python_on_whales.exceptions import DockerException\n\nclient = DockerClient(compose_files=[\"/tmp/docker-compose.yml\"])\ntry:\n    client.execute(\"my-service\", [\"arg1\", \"arg2\"])\nexcept DockerException as e:\n    print(f\"Exit code {e.return_code} while running {e.docker_command}\")\n</code></pre>"},{"location":"user_guide/generic_resources/","title":"Docker Swarm generic resources","text":"<p>There are two kind of generic resources, discreet and named.</p> <p>Both are declared in <code>/etc/docker/daemon.json</code> and both are  accessible in your containers as environment variables.</p>"},{"location":"user_guide/generic_resources/#named-resources","title":"Named resources","text":"<p>Named resources should be used when you have a small number of things you want accessed. The best example is gpu devices. Each gpu has a UUID, which can be the  name of this resources. Actually you could also use an index, and this index would have  to be the \"name\" of the gpu.</p> <p>Since we want to show they're generic, let's take something else than GPUs for this example.</p> <p>Let's say you have 5 hamsters connected to your node, making an app run:</p> <p> </p> <p>They are named Robert, Lucie, Annie, James and Stacy.</p> <p>You'll define one service that needs one hamster and one that needs three. We'll call them <code>my_light_service</code> and <code>my_heavy_service</code>.</p> <p>Let's declare the hamsters in the <code>/etc/docker/daemon.json</code>. If this file doesn't exist on your system, you can create it.</p> <p>Mine looks like this, note that you don't need the insecure registries part: <pre><code>{\n    \"insecure-registries\": [\"127.0.0.1:5000\"],\n    \"node-generic-resources\": [\n        \"hamster=Robert\",\n        \"hamster=Lucie\",\n        \"hamster=Annie\",\n        \"hamster=James\",\n        \"hamster=Stacy\"\n    ]\n}\n</code></pre></p> <p>Restart your Docker daemon with <code>sudo service docker restart</code>.</p> <p>Then create a Docker swarm: <code>docker swarm init</code></p> <p>The hamster are declared, up and ready to go!  You can check they're here with <code>docker node ls</code> and <code>docker node inspect</code>.</p>"},{"location":"user_guide/generic_resources/#creating-services-with-the-cli","title":"Creating services with the CLI","text":"<p>It's time to create services and hit those hamsters!</p> <p>First we'll create the services with the CLI and then with the command line. <pre><code>$ docker service create --generic-resource \"hamster=1\" --name my_light_service ubuntu bash -c \"env &amp;&amp; sleep infinity\"\n$ docker service create --generic-resource \"hamster=3\" --name my_heavy_service ubuntu bash -c \"env &amp;&amp; sleep infinity\"\n</code></pre></p> <p>We have one replica for the light and heavy service. They use 4 hamster. Let's try to use moooooooore!</p> <pre><code>$ docker service scale -d my_light_service=10 my_heavy_service=10\n$ docker service ls\nID                  NAME                MODE                REPLICAS            IMAGE               PORTS\ntt436bxjtdn7        my_heavy_service    replicated          1/10                 ubuntu:latest\nksiq5x0bxch1        my_light_service    replicated          2/10                 ubuntu:latest\n</code></pre> <p>Remember, we only have 5 hamsters, and 3 are needed for the heavy service and one for the light service. Hence here 2 * 1 + 1 * 3 = 5 ! This is what we wanted. So how does each container knows which hamster to use?</p> <p>We asked each container to print the environment variables and sleep for infinity <code>env &amp;&amp; sleep infinity</code>. Let's take a look with <code>docker logs</code>:</p> <pre><code>$ docker ps\nCONTAINER ID IMAGE          COMMAND                NAMES\n1e8932f5a985 ubuntu:latest  \"bash -c 'env &amp;&amp; sle\u2026\" my_light_service.4.shys2wwxz7jjfjg2g2e0xl1sw\n0a5c4ddd303a ubuntu:latest  \"bash -c 'env &amp;&amp; sle\u2026\" my_heavy_service.1.p39satddgf6j1uhspdiohcyzh\ne2872006cc97 ubuntu:latest  \"bash -c 'env &amp;&amp; sle\u2026\" my_light_service.1.bbo0fbi5d5e2zdwozgbse8x57\n\n$ docker logs my_light_service.4.shys2wwxz7jjfjg2g2e0xl1sw\nDOCKER_RESOURCE_HAMSTER=Stacy\nHOSTNAME=1e8932f5a985\n\n$ docker logs my_heavy_service.1.p39satddgf6j1uhspdiohcyzh\nDOCKER_RESOURCE_HAMSTER=Lucie,Annie,James\nHOSTNAME=0a5c4ddd303a\n\n$ docker logs my_light_service.1.bbo0fbi5d5e2zdwozgbse8x57\nDOCKER_RESOURCE_HAMSTER=Robert\nHOSTNAME=e2872006cc97\n</code></pre> <p>So we can see that each container is aware of it's hamster with an environment variable. The process running in the container can grab it and then use the correct hamster without  making two containers use the same hamster.</p>"},{"location":"user_guide/generic_resources/#using-hamsters-with-docker-stack","title":"Using hamsters with Docker stack","text":"<p>Here is a <code>docker-compose.yml</code> that will declare the services exactly like we did in the CLI:</p> <pre><code>version: \"3.8\"\n\nservices:\n  my_light_service:\n    command:\n      - bash\n      - -c\n      - env &amp;&amp; sleep infinity\n    image: ubuntu\n    deploy:\n      replicas: 10\n      resources:\n        reservations:\n          generic_resources:\n            - discrete_resource_spec:\n                kind: 'hamster'\n                value: 1\n\n  my_heavy_service:\n    command:\n      - bash\n      - -c\n      - env &amp;&amp; sleep infinity\n    image: ubuntu\n    deploy:\n      replicas: 10\n      resources:\n        reservations:\n          generic_resources:\n            - discrete_resource_spec:\n                kind: 'hamster'\n                value: 3\n</code></pre> <pre><code>$ docker stack deploy -c docker-compose.yml my_stack_using_hamsters\nCreating network my_stack_using_hamsters_default\nCreating service my_stack_using_hamsters_my_heavy_service\nCreating service my_stack_using_hamsters_my_light_service\n\n$ docker service ls\nID              NAME                                       MODE        REPLICAS  IMAGE \nnlhwfnz0d1cx    my_stack_using_hamsters_my_heavy_service   replicated  1/10      ubuntu:latest\nc77tv3czzfw2    my_stack_using_hamsters_my_light_service   replicated  2/10      ubuntu:latest\n</code></pre>"},{"location":"user_guide/generic_resources/#how-does-that-fit-with-nvidia-gpus","title":"How does that fit with Nvidia GPUs?","text":"<p>Well, if you remember, the Nvidia runtime uses environment variables in the container to know which gpu to use.</p> <p>By modifying the <code>/etc/nvidia-container-runtime/config.toml</code>,  and setting <code>swarm-resource = \"DOCKER_RESOURCE_GPU\"</code>, it indicates the nvidia-docker runtime  that it should watch for this environment variable when deciding which gpu to use. Make the nvidia-docker runtime the default one for this node, replace hamster by gpu and you're good to go as long as you used UUID as your hamster's names.</p> <p>A more in depth guide can be found here.</p>"},{"location":"user_guide/generic_resources/#discreet-resources","title":"Discreet resources","text":"<p>TODO (just put <code>\"node-generic-resources\": [\"hamster=100\"]</code> in the daemon.json, there are too many hamsters to give them names).</p>"},{"location":"user_guide/running_python_on_whales_inside_a_container/","title":"Running python-on-whales inside a container","text":"<p>To follow this example, you just need Docker installed, and nothing else!</p>"},{"location":"user_guide/running_python_on_whales_inside_a_container/#the-use-case","title":"The use case","text":"<p>Sometimes you don't want to install Python on your system, but you still would like to use python-on-whales to handle most of the Docker logic.</p> <p>You can then run python-on-whales inside a Docker container. For simplicity, we let the container access the Docker daemon of the host.</p> <p>Let's give you the code example, and we'll explain afterwards where is the magic.</p>"},{"location":"user_guide/running_python_on_whales_inside_a_container/#example","title":"Example","text":"<p>We want to run this small Python script. It uses python-on-whales. We'll call it <code>main.py</code>.</p> <pre><code># main.py\nfrom python_on_whales import docker\n\nprint(\"We are going to run the hello world docker container\")\n\noutput = docker.run(\"hello-world\")\n\nprint(\"Here is the output:\")\nprint(output)\n\nprint(f\"buildx version: {docker.buildx.version()}\")\nprint(f\"compose version: {docker.compose.version()}\")\n</code></pre> <p>Next to this <code>main.py</code>, make a <code>Dockerfile</code>.</p> <pre><code># Dockerfile\nFROM python:3.9\n\nRUN wget https://download.docker.com/linux/static/stable/x86_64/docker-27.3.1.tgz -O /tmp/docker-27.3.1.tgz\nRUN tar -C /tmp -xzf /tmp/docker-27.3.1.tgz\nRUN cp /tmp/docker/docker /usr/local/bin/docker\n\n# install docker buildx, this step is optional\nRUN mkdir -p ~/.docker/cli-plugins/\nRUN wget https://github.com/docker/buildx/releases/download/v0.17.1/buildx-v0.17.1.linux-amd64 -O ~/.docker/cli-plugins/docker-buildx\nRUN chmod a+x  ~/.docker/cli-plugins/docker-buildx\n\n# install docker compose, this step is optional\nRUN mkdir -p ~/.docker/cli-plugins/\nRUN wget https://github.com/docker/compose/releases/download/latest/docker-compose-linux-x86_64 -O ~/.docker/cli-plugins/docker-compose\nRUN chmod a+x  ~/.docker/cli-plugins/docker-compose\n\nRUN pip install python-on-whales\nRUN mkdir /app\nCOPY ./main.py /app/main.py\nCMD python3 /app/main.py\n</code></pre> <p>We're all set! Let's run this Python script, without having Python installed on the system!</p> <pre><code>docker build -t image-with-python-on-whales .\ndocker run -v /var/run/docker.sock:/var/run/docker.sock image-with-python-on-whales\n</code></pre> <p>You should see this output:</p> <pre><code>We are going to run the hello world docker container\nHere is the output:\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\nbuildx version: github.com/docker/buildx v0.6.3 266c0eac611d64fcc0c72d80206aa364e826758d\ncompose version: Docker Compose version v2.0.0-rc.2\n</code></pre>"},{"location":"user_guide/running_python_on_whales_inside_a_container/#how-does-it-work","title":"How does it work?","text":"<p>The main magic here is the sharing of the docker socket between the host and the container. This is done with the <code>-v /var/run/docker.sock:/var/run/docker.sock</code>.</p> <p>With this option, the container can have access to the docker API. But it still needs the binary client, which is downloaded using <code>wget</code>, along with optionally installing the buildx and compose plugins.</p> <p>Then you're good to go! Simple as that.</p>"}]}